// ========================================
// ChatGPT Console „ÉÜ„Çπ„Éà„Ç≥„Éº„Éâ (Âãï‰ΩúÁ¢∫Ë™çÊ∏à„Åø„Ç≥„Éº„Éâ„Éô„Éº„Çπ)
// ========================================
// ChatGPT„ÅÆ„Éö„Éº„Ç∏„ÅßÈñãÁô∫ËÄÖ„Ç≥„É≥„ÇΩ„Éº„É´„ÇíÈñã„ÅÑ„Å¶„ÄÅ
// „Åì„ÅÆ„Ç≥„Éº„ÉâÂÖ®‰Ωì„Çí„Ç≥„Éî„Éº&„Éö„Éº„Çπ„Éà„Åó„Å¶ÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ

(function () {
  "use strict";

  // ========================================
  // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
  // ========================================
  const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  const log = function (message, type = "info") {
    const timestamp = new Date().toLocaleTimeString("ja-JP", {
      hour12: false,
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    });
    const prefix = `[${timestamp}]`;

    switch (type) {
      case "error":
        console.error(`${prefix} ‚ùå ${message}`);
        break;
      case "success":
        console.log(`${prefix} ‚úÖ ${message}`);
        break;
      case "warning":
        console.warn(`${prefix} ‚ö†Ô∏è ${message}`);
        break;
      case "step":
        console.log(`${prefix} üìç ${message}`);
        break;
      default:
        console.log(`${prefix} ‚ÑπÔ∏è ${message}`);
    }
  };

  log.error = (message) => log(message, "error");
  log.debug = (message) => log(message, "info");

  // ========================================
  // „Çª„É¨„ÇØ„Çø„ÉºÂÆöÁæ©ÔºàÊèê‰æõ„Ç≥„Éº„Éâ„Çà„ÇäÔºâ
  // ========================================
  const SELECTORS = {
    // „É¢„Éá„É´Èñ¢ÈÄ£
    modelButton: [
      '[data-testid="model-switcher-dropdown-button"]',
      'button[aria-label*="„É¢„Éá„É´ „Çª„É¨„ÇØ„Çø„Éº"]',
      'button[aria-label*="„É¢„Éá„É´"][aria-haspopup="menu"]',
      "#radix-\\:r2m\\:",
      'button.group.flex.cursor-pointer[aria-haspopup="menu"]',
    ],
    modelMenu: [
      '[role="menu"][data-radix-menu-content]',
      '[role="menu"][data-state="open"]',
      'div.z-50.max-w-xs.rounded-2xl.popover[role="menu"]',
      '[aria-labelledby*="radix"][role="menu"]',
      'div[data-radix-popper-content-wrapper] [role="menu"]',
    ],
    legacyButton: [
      '[data-testid="„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´-submenu"]',
      '[role="menuitem"][data-has-submenu]:contains("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´")',
      'div.__menu-item:contains("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´")',
      '[role="menuitem"][aria-haspopup="menu"]:last-of-type',
    ],
    legacyMenu: [
      '[role="menu"][data-side="right"]',
      'div[data-side="right"][role="menu"]',
      '[role="menu"]:not([data-side="bottom"])',
      'div.mt-2.max-h-\\[calc\\(100vh-300px\\)\\][role="menu"]',
    ],
    // Ê©üËÉΩÈñ¢ÈÄ£
    menuButton: [
      '[data-testid="composer-plus-btn"]',
      'button[aria-haspopup="menu"]',
      "#radix-\\:R2eij4im4pact9a4mj5\\:",
      "button.composer-btn",
      'div[class*="leading"] button',
    ],
    mainMenu: [
      '[role="menu"][data-state="open"]',
      "[data-radix-menu-content]",
      'div[data-side="bottom"][role="menu"]',
      'div.popover[role="menu"]',
      '[role="menu"]',
    ],
    subMenu: [
      '[role="menu"][data-side="right"]',
      'div[data-side="right"][role="menu"]',
      '[data-align="start"][role="menu"]:last-of-type',
    ],
    // ÂÖ•Âäõ„ÉªÈÄÅ‰ø°Èñ¢ÈÄ£
    textInput: [
      ".ProseMirror",
      "#prompt-textarea",
      '[contenteditable="true"][translate="no"]',
      'div[data-virtualkeyboard="true"]',
      "div.ProseMirror.text-token-text-primary",
      ".ql-editor",
    ],
    sendButton: [
      '[data-testid="send-button"]',
      "#composer-submit-button",
      'button[aria-label="„Éó„É≠„É≥„Éó„Éà„ÇíÈÄÅ‰ø°„Åô„Çã"]',
      "button.composer-submit-btn.composer-submit-button-color",
      'button:has(svg[width="20"][height="20"])',
    ],
    stopButton: [
      '[data-testid="stop-button"]',
      '#composer-submit-button[aria-label="„Çπ„Éà„É™„Éº„Éü„É≥„Ç∞„ÅÆÂÅúÊ≠¢"]',
      "button.composer-submit-btn.composer-secondary-button-color",
      'button:has(svg path[d*="M4.5 5.75"])',
    ],
    // ÁµêÊûúÂèñÂæóÈñ¢ÈÄ£
    canvasText: [
      "div.markdown.prose",
      "div.w-full.pt-1.pb-1",
      "div.markdown-new-styling",
    ],
    normalText: [
      '[data-message-author-role="assistant"]',
      "div.text-message",
      "div.min-h-8.text-message",
    ],
  };

  // ========================================
  // „Éò„É´„Éë„ÉºÈñ¢Êï∞ÔºàÊèê‰æõ„Ç≥„Éº„Éâ„Çà„ÇäÔºâ
  // ========================================

  // Ë£ÖÈ£æË¶ÅÁ¥†„ÇíÈô§Â§ñ„Åó„Åü„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
  function getCleanText(element) {
    if (!element) return "";
    const clone = element.cloneNode(true);
    // Ë£ÖÈ£æË¶ÅÁ¥†„ÇíÂâäÈô§
    const decorativeElements = clone.querySelectorAll(
      "mat-icon, mat-ripple, svg, .icon, .ripple",
    );
    decorativeElements.forEach((el) => el.remove());
    return clone.textContent?.trim() || "";
  }

  // React „Ç§„Éô„É≥„Éà„Éà„É™„Ç¨„Éº
  function triggerReactEvent(element, eventType, eventData = {}) {
    try {
      if (eventType === "click") {
        element.click();
        return true;
      } else if (eventType === "pointer") {
        const pointerDown = new PointerEvent("pointerdown", {
          bubbles: true,
          cancelable: true,
          view: window,
          ...eventData,
        });
        const pointerUp = new PointerEvent("pointerup", {
          bubbles: true,
          cancelable: true,
          view: window,
          ...eventData,
        });
        element.dispatchEvent(pointerDown);
        element.dispatchEvent(pointerUp);
        return true;
      }
      return false;
    } catch (error) {
      log(`React „Ç§„Éô„É≥„Éà„Éà„É™„Ç¨„ÉºÂ§±Êïó: ${error.message}`, "error");
      return false;
    }
  }

  // Ë¶ÅÁ¥†„ÅåÂèØË¶ñ„Åã„Å§„ÇØ„É™„ÉÉ„ÇØÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
  function isElementInteractable(element) {
    if (!element) return false;
    const rect = element.getBoundingClientRect();
    const style = window.getComputedStyle(element);
    return (
      rect.width > 0 &&
      rect.height > 0 &&
      style.display !== "none" &&
      style.visibility !== "hidden" &&
      style.opacity !== "0"
    );
  }

  // Ë§áÊï∞„Çª„É¨„ÇØ„Çø„ÅßË¶ÅÁ¥†Ê§úÁ¥¢ÔºàÊèê‰æõ„Ç≥„Éº„Éâ„Çà„ÇäÔºâ
  async function findElement(selectors, description, maxRetries = 3) {
    for (let retry = 0; retry < maxRetries; retry++) {
      for (const selector of selectors) {
        try {
          let element;

          if (selector.includes(":contains(")) {
            const match = selector.match(/\:contains\("([^"]+)"\)/);
            if (match) {
              const text = match[1];
              const baseSelector = selector.split(":contains(")[0];
              const elements = document.querySelectorAll(baseSelector || "*");
              element = Array.from(elements).find(
                (el) => el.textContent && el.textContent.includes(text),
              );
            }
          } else {
            element = document.querySelector(selector);
          }

          if (element && isElementInteractable(element)) {
            return element;
          }
        } catch (e) {
          // „Çª„É¨„ÇØ„Çø„Ç®„É©„Éº„ÇíÁÑ°Ë¶ñ
        }
      }

      if (retry < maxRetries - 1) {
        await sleep(500);
      }
    }

    return null;
  }

  // „ÉÜ„Ç≠„Çπ„Éà„ÅßË¶ÅÁ¥†„ÇíÊ§úÁ¥¢
  function findElementByText(selector, text, parent = document) {
    const elements = parent.querySelectorAll(selector);
    for (const el of elements) {
      if (el.textContent && el.textContent.includes(text)) {
        return el;
      }
    }
    return null;
  }

  // ========================================
  // ChatGPT„É¢„Éá„É´„ÉªÊ©üËÉΩÊ§úÂá∫Èñ¢Êï∞ÔºàÊèê‰æõ„Ç≥„Éº„Éâ„Çà„ÇäÔºâ
  // ========================================
  async function detectChatGPTModelsAndFeatures() {
    log("üîç ChatGPT„É¢„Éá„É´„ÉªÊ©üËÉΩÊ§úÂá∫ÈñãÂßã", "step");

    const availableModels = [];
    const availableFunctions = [];

    try {
      // ========================================
      // „É¢„Éá„É´‰∏ÄË¶ßÂèñÂæó
      // ========================================
      log("„É¢„Éá„É´Âàá„ÇäÊõø„Åà„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„Åô...", "step");
      const modelButton = await findElement(
        SELECTORS.modelButton,
        "„É¢„Éá„É´Âàá„ÇäÊõø„Åà„Éú„Çø„É≥",
      );
      if (!modelButton) {
        throw new Error("„É¢„Éá„É´Âàá„ÇäÊõø„Åà„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
      }

      const currentModelText = getCleanText(modelButton);
      log(`ÁèæÂú®„ÅÆ„É¢„Éá„É´: ${currentModelText}`, "info");

      triggerReactEvent(modelButton, "pointer");
      await sleep(1500);

      log("Ë°®Á§∫„Åï„Çå„Åü„É¢„Éá„É´‰∏ÄË¶ß„ÇíÂèñÂæó„ÉªË®òÈå≤", "step");
      const modelMenu = await findElement(
        SELECTORS.modelMenu,
        "„É¢„Éá„É´„É°„Éã„É•„Éº",
      );
      if (!modelMenu) {
        throw new Error("„É¢„Éá„É´„É°„Éã„É•„Éº„ÅåÈñã„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");
      }

      // „É°„Ç§„É≥„É°„Éã„É•„Éº„ÅÆ„É¢„Éá„É´ÂèñÂæó
      const mainMenuItems = modelMenu.querySelectorAll(
        '[role="menuitem"][data-testid^="model-switcher-"]',
      );
      mainMenuItems.forEach((item) => {
        const modelName = getCleanText(item);
        if (modelName && !modelName.includes("„É¨„Ç¨„Ç∑„Éº")) {
          availableModels.push({
            name: modelName,
            testId: item.getAttribute("data-testid"),
            type: "Current",
          });
          log(`„É¢„Éá„É´Áô∫Ë¶ã: ${modelName}`, "success");
        }
      });

      // „É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´„ÉÅ„Çß„ÉÉ„ÇØ
      const legacyButton =
        modelMenu.querySelector('[role="menuitem"][data-has-submenu]') ||
        Array.from(modelMenu.querySelectorAll('[role="menuitem"]')).find(
          (el) => el.textContent && el.textContent.includes("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´"),
        );

      if (legacyButton) {
        log("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ", "info");
        legacyButton.click();
        await sleep(1500);

        const allMenus = document.querySelectorAll('[role="menu"]');
        allMenus.forEach((menu) => {
          if (menu !== modelMenu) {
            const items = menu.querySelectorAll('[role="menuitem"]');
            items.forEach((item) => {
              const modelName = getCleanText(item);
              if (modelName && modelName.includes("GPT")) {
                availableModels.push({
                  name: modelName,
                  type: "Legacy",
                });
                log(`„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´Áô∫Ë¶ã: ${modelName}`, "success");
              }
            });
          }
        });
      }

      // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
      log("„É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã", "step");
      document.dispatchEvent(
        new KeyboardEvent("keydown", { key: "Escape", code: "Escape" }),
      );
      await sleep(1000);

      // ========================================
      // Ê©üËÉΩ‰∏ÄË¶ßÂèñÂæó
      // ========================================
      log("\nÊ©üËÉΩ‰∏ÄË¶ß„ÅÆÂèñÂæó", "step");

      // ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÊ©üËÉΩ„Åå„ÅÇ„Çå„Å∞Ëß£Èô§
      log("ÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÊ©üËÉΩ„Åå„ÅÇ„Çå„Å∞„ÄÅ„Åô„Åπ„Å¶Ëß£Èô§", "step");
      const selectedButtons = document.querySelectorAll(
        'button[data-pill="true"]',
      );
      selectedButtons.forEach((btn) => {
        const closeBtn = btn.querySelector('button[aria-label*="ÂâäÈô§"]');
        if (closeBtn) closeBtn.click();
      });
      await sleep(500);

      // „É°„Éã„É•„Éº„ÇíÈñã„Åè
      log("„É°„Éã„É•„Éº„ÇíÈñã„Åè„Åü„ÇÅ„ÅÆ„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ", "step");
      const functionMenuButton = await findElement(
        SELECTORS.menuButton,
        "„É°„Éã„É•„Éº„Éú„Çø„É≥",
      );
      if (!functionMenuButton) {
        throw new Error("Ê©üËÉΩ„É°„Éã„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
      }

      functionMenuButton.dispatchEvent(
        new PointerEvent("pointerdown", { bubbles: true }),
      );
      await sleep(100);
      functionMenuButton.dispatchEvent(
        new PointerEvent("pointerup", { bubbles: true }),
      );
      await sleep(1500);

      const functionMenu = await findElement(
        SELECTORS.mainMenu,
        "„É°„Ç§„É≥„É°„Éã„É•„Éº",
      );
      if (!functionMenu) {
        throw new Error("Ê©üËÉΩ„É°„Éã„É•„Éº„ÅåÈñã„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");
      }
      log("Ê©üËÉΩ„É°„Éã„É•„Éº„ÅåÈñã„Åã„Çå„Åæ„Åó„Åü", "success");

      // „Åô„Åπ„Å¶„ÅÆÊ©üËÉΩ„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
      log("Èñã„ÅÑ„Åü„É°„Éã„É•„Éº„Åã„Çâ„Åô„Åπ„Å¶„ÅÆÊ©üËÉΩ„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó", "step");

      // „É°„Ç§„É≥„É°„Éã„É•„Éº„ÅÆÊ©üËÉΩ
      const menuItems = functionMenu.querySelectorAll('[role="menuitemradio"]');
      menuItems.forEach((item) => {
        const featureName = getCleanText(item);
        if (featureName) {
          availableFunctions.push(featureName);
          log(`Ê©üËÉΩÁô∫Ë¶ã: ${featureName}`, "success");
        }
      });

      // „Åï„Çâ„Å´Ë°®Á§∫„Éú„Çø„É≥„ÉÅ„Çß„ÉÉ„ÇØ
      const moreButton = findElementByText('[role="menuitem"]', "„Åï„Çâ„Å´Ë°®Á§∫");
      if (moreButton) {
        log("„Äå„Åï„Çâ„Å´Ë°®Á§∫„Äç„Çí„ÇØ„É™„ÉÉ„ÇØ", "info");
        moreButton.click();
        await sleep(1000);

        const subMenu = document.querySelector('[data-side="right"]');
        if (subMenu) {
          const subMenuItems = subMenu.querySelectorAll(
            '[role="menuitemradio"]',
          );
          subMenuItems.forEach((item) => {
            const featureName = getCleanText(item);
            if (featureName) {
              availableFunctions.push(featureName);
              log(`„Çµ„Éñ„É°„Éã„É•„ÉºÊ©üËÉΩÁô∫Ë¶ã: ${featureName}`, "success");
            }
          });
        }
      }

      // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
      log("„É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã", "step");
      document.dispatchEvent(
        new KeyboardEvent("keydown", { key: "Escape", code: "Escape" }),
      );
      await sleep(1000);

      const result = {
        models: availableModels,
        functions: availableFunctions,
      };

      // „Ç∞„É≠„Éº„Éê„É´„Å´Ê§úÂá∫ÁµêÊûú„Çí‰øùÂ≠ò
      window.ChatGPTTest.detectionResult = result;

      log(
        `‚úÖ ChatGPTÊ§úÂá∫ÂÆå‰∫Ü - „É¢„Éá„É´: ${availableModels.length}ÂÄã, Ê©üËÉΩ: ${availableFunctions.length}ÂÄã`,
        "success",
      );

      console.log("\n" + "=".repeat(60));
      console.log("üìã Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´‰∏ÄË¶ß:");
      console.log("=".repeat(60));
      availableModels.forEach((model, index) => {
        console.log(`${index}. [${model.type}] ${model.name}`);
      });

      console.log("\n" + "=".repeat(60));
      console.log("üìã Âà©Áî®ÂèØËÉΩ„Å™Ê©üËÉΩ‰∏ÄË¶ß:");
      console.log("=".repeat(60));
      console.log("0. Ë®≠ÂÆö„Å™„Åó");
      availableFunctions.forEach((feature, index) => {
        console.log(`${index + 1}. ${feature}`);
      });

      // UI„Å∏ÈÄÅ‰ø°
      if (
        typeof chrome !== "undefined" &&
        chrome.runtime &&
        chrome.runtime.sendMessage
      ) {
        chrome.runtime.sendMessage(
          {
            type: "AI_MODEL_FUNCTION_UPDATE",
            aiType: "chatgpt",
            data: {
              models: availableModels.map((m) => m.name),
              functions: availableFunctions,
            },
          },
          (response) => {
            if (chrome.runtime.lastError) {
              log(
                "‚ö†Ô∏è UIÈÄÅ‰ø°„Ç®„É©„Éº: " + chrome.runtime.lastError.message,
                "warning",
              );
            } else {
              log("‚úÖ UI„Å∏„ÅÆÈÄÅ‰ø°ÂÆå‰∫Ü", "success");
            }
          },
        );
      }

      return result;
    } catch (error) {
      log.error(`ChatGPTÊ§úÂá∫„Ç®„É©„Éº: ${error.message}`);
      return {
        models: availableModels,
        functions: availableFunctions,
      };
    }
  }

  // ========================================
  // Âü∫Êú¨Êìç‰ΩúÈñ¢Êï∞ÔºàÊèê‰æõ„Ç≥„Éº„Éâ„Çà„ÇäÔºâ
  // ========================================

  // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ
  async function inputTextChatGPT(text) {
    const input = await findElement(SELECTORS.textInput, "„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ");
    if (!input) {
      throw new Error("ÂÖ•ÂäõÊ¨Ñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    // ChatGPTÂãï‰Ωú„Ç≥„Éº„Éâ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÂá¶ÁêÜ„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®
    if (
      input.classList.contains("ProseMirror") ||
      input.classList.contains("ql-editor")
    ) {
      input.innerHTML = "";
      const p = document.createElement("p");
      p.textContent = text;
      input.appendChild(p);
      input.classList.remove("ql-blank");
      input.dispatchEvent(new Event("input", { bubbles: true }));
      input.dispatchEvent(new Event("change", { bubbles: true }));
    } else {
      input.textContent = text;
      input.dispatchEvent(new Event("input", { bubbles: true }));
    }

    log("„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÂÆå‰∫Ü", "success");
    await sleep(1000);
    return true;
  }

  // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
  async function sendMessageChatGPT() {
    const sendBtn = await findElement(SELECTORS.sendButton, "ÈÄÅ‰ø°„Éú„Çø„É≥");
    if (!sendBtn) {
      throw new Error("ÈÄÅ‰ø°„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    sendBtn.click();
    log("ÈÄÅ‰ø°„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü", "success");
    await sleep(1000);
    return true;
  }

  // „É¨„Çπ„Éù„É≥„ÇπÂæÖÊ©ü
  async function waitForResponseChatGPT() {
    log("ÂøúÁ≠îÂæÖÊ©ü‰∏≠...", "step");

    // ÂÅúÊ≠¢„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã„Åæ„ÅßÂæÖÊ©ü
    let stopBtn = null;
    for (let i = 0; i < 30; i++) {
      stopBtn = await findElement(SELECTORS.stopButton, "ÂÅúÊ≠¢„Éú„Çø„É≥", 1);
      if (stopBtn) {
        log("ÂÅúÊ≠¢„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Åæ„Åó„Åü", "success");
        break;
      }
      await sleep(1000);
    }

    // ÂÅúÊ≠¢„Éú„Çø„É≥„ÅåÊ∂à„Åà„Çã„Åæ„ÅßÂæÖÊ©üÔºàÊúÄÂ§ß5ÂàÜÔºâ
    if (stopBtn) {
      log("ÈÄÅ‰ø°ÂÅúÊ≠¢„Éú„Çø„É≥„ÅåÊ∂à„Åà„Çã„Åæ„ÅßÂæÖÊ©üÔºàÊúÄÂ§ß5ÂàÜÔºâ", "info");
      for (let i = 0; i < 300; i++) {
        stopBtn = await findElement(SELECTORS.stopButton, "ÂÅúÊ≠¢„Éú„Çø„É≥", 1);
        if (!stopBtn) {
          log("ÂøúÁ≠îÂÆå‰∫Ü", "success");
          break;
        }
        if (i % 10 === 0) {
          log(`ÂøúÁ≠îÂæÖÊ©ü‰∏≠... (${i}ÁßíÁµåÈÅé)`, "info");
        }
        await sleep(1000);
      }
    }

    await sleep(2000); // ËøΩÂä†„ÅÆÂæÖÊ©ü
    return true;
  }

  // „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
  async function getResponseTextChatGPT() {
    // CanvasÊ©üËÉΩ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
    let canvasText = "";
    const canvasContainers = document.querySelectorAll(
      "div.w-full.pt-1.pb-1, div.w-full.pt-1.pb-1.sm\\:pt-4.sm\\:pb-3",
    );
    for (const container of canvasContainers) {
      const markdownDiv = container.querySelector(
        "div.markdown.prose, div.markdown.prose.dark\\:prose-invert",
      );
      if (markdownDiv) {
        const parentMessage = markdownDiv.closest("[data-message-author-role]");
        if (!parentMessage) {
          canvasText = markdownDiv.textContent?.trim() || "";
          if (canvasText) {
            log(
              `CanvasÊ©üËÉΩ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó: ${canvasText.length}ÊñáÂ≠ó`,
              "success",
            );
            break;
          }
        }
      }
    }

    // ÈÄöÂ∏∏Âá¶ÁêÜ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
    let normalText = "";
    const assistantMessages = document.querySelectorAll(
      '[data-message-author-role="assistant"]',
    );
    if (assistantMessages.length > 0) {
      const lastMessage = assistantMessages[assistantMessages.length - 1];
      const markdownDivs = lastMessage.querySelectorAll("div.markdown");
      for (const markdownDiv of markdownDivs) {
        const text = markdownDiv.textContent?.trim() || "";
        if (text && text !== canvasText) {
          normalText = text;
          log(`ÈÄöÂ∏∏Âá¶ÁêÜ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó: ${normalText.length}ÊñáÂ≠ó`, "success");
          break;
        }
      }
    }

    // ÂÑ™ÂÖàÈ†Ü‰ΩçÔºöCanvas„ÉÜ„Ç≠„Çπ„Éà > ÈÄöÂ∏∏„ÉÜ„Ç≠„Çπ„Éà
    const responseText = canvasText || normalText;

    if (!responseText) {
      throw new Error("ÂøúÁ≠î„ÉÜ„Ç≠„Çπ„Éà„ÅåÁ©∫„Åß„Åô");
    }

    log(
      `‚úÖ „É¨„Çπ„Éù„É≥„Çπ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÂÆå‰∫Ü: ${responseText.substring(0, 100)}...`,
      "success",
    );
    return responseText;
  }

  // „É¢„Éá„É´ÈÅ∏ÊäûÔºà„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´ÂØæÂøúÁâàÔºâ
  async function selectModelChatGPT(modelName) {
    log(`„É¢„Éá„É´ÈÅ∏Êäû: ${modelName}`, "step");

    const modelBtn = await findElement(SELECTORS.modelButton, "„É¢„Éá„É´„Éú„Çø„É≥");
    if (!modelBtn) {
      throw new Error("„É¢„Éá„É´„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    triggerReactEvent(modelBtn, "pointer");
    await sleep(1500);

    const modelMenuEl = await findElement(
      SELECTORS.modelMenu,
      "„É¢„Éá„É´„É°„Éã„É•„Éº",
    );
    if (!modelMenuEl) {
      throw new Error("„É¢„Éá„É´„É°„Éã„É•„Éº„ÅåÈñã„Åç„Åæ„Åõ„Çì");
    }

    // „É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const isLegacy =
      modelName.includes("GPT-4o") || modelName.includes("GPT-3");

    if (isLegacy) {
      // „É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´„É°„Éã„É•„Éº„ÇíÈñã„Åè
      const legacyButton =
        modelMenuEl.querySelector('[role="menuitem"][data-has-submenu]') ||
        Array.from(modelMenuEl.querySelectorAll('[role="menuitem"]')).find(
          (el) => el.textContent && el.textContent.includes("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´"),
        );

      if (legacyButton) {
        log("„É¨„Ç¨„Ç∑„Éº„É¢„Éá„É´„É°„Éã„É•„Éº„ÇíÈñã„Åè", "info");
        legacyButton.click();
        await sleep(1500);
      }
    }

    // „Åô„Åπ„Å¶„ÅÆ„É°„Éã„É•„Éº„Ç¢„Ç§„ÉÜ„É†„Åã„ÇâÊ§úÁ¥¢
    const allMenuItems = document.querySelectorAll('[role="menuitem"]');
    const targetItem = Array.from(allMenuItems).find((item) => {
      const text = getCleanText(item);
      return text === modelName || text.includes(modelName);
    });

    if (targetItem) {
      targetItem.click();
      await sleep(2000);
      log(`„É¢„Éá„É´ÈÅ∏ÊäûÂÆå‰∫Ü: ${modelName}`, "success");
      return true;
    } else {
      throw new Error(`ÊåáÂÆö„Åï„Çå„Åü„É¢„Éá„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${modelName}`);
    }
  }

  // Ê©üËÉΩÈÅ∏Êäû
  async function selectFunctionChatGPT(functionName) {
    log(`Ê©üËÉΩÈÅ∏Êäû: ${functionName}`, "step");

    const funcMenuBtn = await findElement(
      SELECTORS.menuButton,
      "„É°„Éã„É•„Éº„Éú„Çø„É≥",
    );
    if (!funcMenuBtn) {
      throw new Error("Ê©üËÉΩ„É°„Éã„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    funcMenuBtn.dispatchEvent(
      new PointerEvent("pointerdown", { bubbles: true }),
    );
    await sleep(100);
    funcMenuBtn.dispatchEvent(new PointerEvent("pointerup", { bubbles: true }));
    await sleep(1500);

    const funcMenu = await findElement(SELECTORS.mainMenu, "„É°„Ç§„É≥„É°„Éã„É•„Éº");
    if (!funcMenu) {
      throw new Error("Ê©üËÉΩ„É°„Éã„É•„Éº„ÅåÈñã„Åç„Åæ„Åõ„Çì");
    }

    // „É°„Ç§„É≥„É°„Éã„É•„Éº„ÅßÊ©üËÉΩ„ÇíÊé¢„Åô
    let featureElement = findElementByText(
      '[role="menuitemradio"]',
      functionName,
    );

    if (!featureElement) {
      // „Åï„Çâ„Å´Ë°®Á§∫„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const moreBtn = findElementByText('[role="menuitem"]', "„Åï„Çâ„Å´Ë°®Á§∫");
      if (moreBtn) {
        moreBtn.click();
        await sleep(1000);

        const subMenu = document.querySelector('[data-side="right"]');
        if (subMenu) {
          featureElement = findElementByText(
            '[role="menuitemradio"]',
            functionName,
            subMenu,
          );
        }
      }
    }

    if (featureElement) {
      featureElement.click();
      await sleep(1500);
      log(`Ê©üËÉΩÈÅ∏ÊäûÂÆå‰∫Ü: ${functionName}`, "success");

      // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
      document.dispatchEvent(
        new KeyboardEvent("keydown", { key: "Escape", code: "Escape" }),
      );
      await sleep(1000);
      return true;
    } else {
      throw new Error(`ÊåáÂÆö„Åï„Çå„ÅüÊ©üËÉΩ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: ${functionName}`);
    }
  }

  // ========================================
  // Êñ∞Ë¶èËøΩÂä†Èñ¢Êï∞
  // ========================================

  // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„Åß„É¢„Éá„É´ÈÅ∏Êäû
  async function selectModelByIndex(index) {
    if (!window.ChatGPTTest.detectionResult) {
      throw new Error("ÂÖà„Å´detectChatGPTModelsAndFeatures()„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    }

    const model = window.ChatGPTTest.detectionResult.models[index];
    if (!model) {
      throw new Error(`„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ${index}„ÅÆ„É¢„Éá„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    }

    log(`„É¢„Éá„É´ÈÅ∏Êäû: [${model.type}] ${model.name}`, "step");
    return await selectModelChatGPT(model.name);
  }

  // „Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÅßÊ©üËÉΩÈÅ∏Êäû
  async function selectFunctionByIndex(index) {
    if (!window.ChatGPTTest.detectionResult) {
      throw new Error("ÂÖà„Å´detectChatGPTModelsAndFeatures()„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ");
    }

    if (index === 0) {
      log("Ê©üËÉΩÈÅ∏Êäû: Ë®≠ÂÆö„Å™„Åó", "step");
      // Êó¢Â≠ò„ÅÆÈÅ∏Êäû„ÇíËß£Èô§
      const selectedButtons = document.querySelectorAll(
        'button[data-pill="true"]',
      );
      selectedButtons.forEach((btn) => {
        const closeBtn = btn.querySelector('button[aria-label*="ÂâäÈô§"]');
        if (closeBtn) closeBtn.click();
      });
      return true;
    }

    const functionName =
      window.ChatGPTTest.detectionResult.functions[index - 1];
    if (!functionName) {
      throw new Error(`„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ${index}„ÅÆÊ©üËÉΩ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    }

    return await selectFunctionChatGPT(functionName);
  }

  // UI„Å∏„Éá„Éº„Çø„ÇíÈÄÅ‰ø°
  function sendToUI(data) {
    if (!data) data = window.ChatGPTTest.detectionResult;

    if (
      typeof chrome !== "undefined" &&
      chrome.runtime &&
      chrome.runtime.sendMessage
    ) {
      chrome.runtime.sendMessage(
        {
          type: "AI_MODEL_FUNCTION_UPDATE",
          aiType: "chatgpt",
          data: {
            models: data.models.map((m) =>
              typeof m === "object" ? m.name : m,
            ),
            functions: data.functions,
          },
        },
        (response) => {
          if (chrome.runtime.lastError) {
            log(
              "‚ö†Ô∏è UIÈÄÅ‰ø°„Ç®„É©„Éº: " + chrome.runtime.lastError.message,
              "warning",
            );
          } else {
            log("‚úÖ UI„Å∏„ÅÆÈÄÅ‰ø°ÂÆå‰∫Ü", "success");
          }
        },
      );
    }
  }

  // Áµ±Âêà„ÉÜ„Çπ„ÉàÂÆüË°å
  async function executeFullTest(modelIndex, functionIndex, prompt) {
    log("üöÄ Áµ±Âêà„ÉÜ„Çπ„ÉàÈñãÂßã", "step");

    try {
      // 1. Ê§úÂá∫ÂÆüË°åÔºà„Åæ„Å†ÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºâ
      if (!window.ChatGPTTest.detectionResult) {
        await detectChatGPTModelsAndFeatures();
      }

      // 2. „É¢„Éá„É´ÈÅ∏Êäû
      await selectModelByIndex(modelIndex);

      // 3. Ê©üËÉΩÈÅ∏Êäû
      await selectFunctionByIndex(functionIndex);

      // 4. „Éó„É≠„É≥„Éó„ÉàÂÖ•Âäõ„ÉªÈÄÅ‰ø°
      await inputTextChatGPT(prompt);
      await sendMessageChatGPT();

      // 5. ÂøúÁ≠îÂæÖÊ©ü„ÉªÂèñÂæó
      await waitForResponseChatGPT();
      const response = await getResponseTextChatGPT();

      log(`‚úÖ „ÉÜ„Çπ„ÉàÂÆå‰∫Ü: ${response.substring(0, 100)}...`, "success");
      return response;
    } catch (error) {
      log.error(`„ÉÜ„Çπ„Éà„Ç®„É©„Éº: ${error.message}`);
      throw error;
    }
  }

  // ========================================
  // „ÉÜ„Çπ„ÉàÈñ¢Êï∞
  // ========================================
  async function runTests() {
    log("üéØ ChatGPT„ÉÜ„Çπ„ÉàÈñãÂßã", "step");

    try {
      // 1. „É¢„Éá„É´„ÉªÊ©üËÉΩÊ§úÂá∫„ÉÜ„Çπ„Éà
      log("\nüìã „ÉÜ„Çπ„Éà1: „É¢„Éá„É´„ÉªÊ©üËÉΩÊ§úÂá∫", "step");
      const detectionResult = await detectChatGPTModelsAndFeatures();
      log("Ê§úÂá∫ÁµêÊûú:", "info");
      console.log(detectionResult);

      // 2. Âü∫Êú¨„ÉÅ„É£„ÉÉ„Éà„ÉÜ„Çπ„Éà
      log("\nüí¨ „ÉÜ„Çπ„Éà2: Âü∫Êú¨„ÉÅ„É£„ÉÉ„ÉàÊ©üËÉΩ", "step");
      await inputTextChatGPT("„Åì„Çì„Å´„Å°„ÅØÔºÅ„Åì„Çå„ÅØ„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Åß„Åô„ÄÇ");
      await sendMessageChatGPT();
      await waitForResponseChatGPT();
      const response = await getResponseTextChatGPT();
      log(`„ÉÅ„É£„ÉÉ„ÉàÂøúÁ≠î: ${response.substring(0, 200)}...`, "info");

      log("\n‚úÖ ÂÖ®„ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ", "success");
    } catch (error) {
      log.error(`„ÉÜ„Çπ„Éà„Ç®„É©„Éº: ${error.message}`);
    }
  }

  // ========================================
  // „Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
  // ========================================
  window.ChatGPTTest = {
    // Ê§úÂá∫ÁµêÊûú„Çí‰øùÂ≠ò
    detectionResult: null,

    // Ê§úÂá∫Ê©üËÉΩ
    detectChatGPTModelsAndFeatures,

    // Âü∫Êú¨Êìç‰Ωú
    inputTextChatGPT,
    sendMessageChatGPT,
    waitForResponseChatGPT,
    getResponseTextChatGPT,
    selectModelChatGPT,
    selectFunctionChatGPT,

    // Êñ∞Ë¶èËøΩÂä†
    selectModelByIndex,
    selectFunctionByIndex,
    sendToUI,
    executeFullTest,

    // „ÉÜ„Çπ„ÉàÂÆüË°å
    runTests,

    // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
    sleep,
    log,
  };

  // ========================================
  // ‰ΩøÁî®ÊñπÊ≥ï„ÅÆË°®Á§∫
  // ========================================
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         ChatGPT „Ç≥„É≥„ÇΩ„Éº„É´„ÉÜ„Çπ„Éà„ÉÑ„Éº„É´             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìå Âà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éû„É≥„Éâ:

1Ô∏è‚É£ „É¢„Éá„É´„ÉªÊ©üËÉΩ„ÅÆÊ§úÂá∫:
   await ChatGPTTest.detectChatGPTModelsAndFeatures()

2Ô∏è‚É£ Âü∫Êú¨ÁöÑ„Å™„ÉÅ„É£„ÉÉ„Éà:
   await ChatGPTTest.inputTextChatGPT("„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏")
   await ChatGPTTest.sendMessageChatGPT()
   await ChatGPTTest.waitForResponseChatGPT()
   await ChatGPTTest.getResponseTextChatGPT()

3Ô∏è‚É£ „É¢„Éá„É´ÈÅ∏Êäû:
   await ChatGPTTest.selectModelChatGPT("GPT-4o")

4Ô∏è‚É£ Ê©üËÉΩÈÅ∏Êäû:
   await ChatGPTTest.selectFunctionChatGPT("Deep Research")

5Ô∏è‚É£ ÂÖ®Ê©üËÉΩ„ÉÜ„Çπ„ÉàÂÆüË°å:
   await ChatGPTTest.runTests()

üí° „Éí„É≥„Éà:
- „Åô„Åπ„Å¶„ÅÆÈñ¢Êï∞„ÅØ async/await „ÅßÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ
- „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅ„Éñ„É©„Ç¶„Ç∂„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„ÅßË©≥Á¥∞„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åô
- ChatGPTTest.log() „Åß„Ç´„Çπ„Çø„É†„É≠„Ç∞„ÇíÂá∫Âäõ„Åß„Åç„Åæ„Åô
`);

  log("‚úÖ ChatGPT„ÉÜ„Çπ„Éà„ÉÑ„Éº„É´„ÅÆÊ∫ñÂÇôÂÆå‰∫ÜÔºÅ", "success");
})();

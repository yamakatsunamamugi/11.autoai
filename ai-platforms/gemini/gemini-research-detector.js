/**
 * „É¢„Éá„É´„ÉªÊ©üËÉΩ„É™„Çµ„Éº„ÉÅ„Ç≥„Éº„Éâ Gemini
 * ‰ΩúÊàêÊó•: 2025Âπ¥8Êúà14Êó•
 * 
 * „Åì„ÅÆ„Ç≥„Éº„Éâ„ÅØ„ÄÅGemini„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅßÂà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´„Å®Ê©üËÉΩ„Çí
 * Ëá™ÂãïÁöÑ„Å´„É™„Çµ„Éº„ÉÅ„Åó„ÄÅÂ§âÊõ¥„ÇíÊ§úÂá∫„Åô„Çã„Åü„ÇÅ„ÅÆ„Ç≥„É≥„ÇΩ„Éº„É´„Çπ„ÇØ„É™„Éó„Éà„Åß„Åô„ÄÇ
 */

(function() {
    'use strict';
    
    console.log('='.repeat(80));
    console.log('„É¢„Éá„É´„ÉªÊ©üËÉΩ„É™„Çµ„Éº„ÉÅ„Ç≥„Éº„Éâ Gemini');
    console.log(`‰ΩúÊàêÊó•: ${new Date().toLocaleDateString('ja-JP')} ${new Date().toLocaleTimeString('ja-JP')}`);
    console.log('='.repeat(80));
    
    // ===== Ë®≠ÂÆö„Å®‰øùÂ≠ò„Éá„Éº„Çø =====
    const STORAGE_KEY = 'gemini_research_data';
    const SPREADSHEET_URL = 'https://docs.google.com/spreadsheets/d/1QfOFEUWtlR0wwaN5BRyVdenFPxCRJmsf4SPo87O_ZnY/edit?gid=915128086#gid=915128086';
    
    // ÁèæÂú®„ÅÆ„Éá„Éº„ÇøÊßãÈÄ†
    const currentData = {
        timestamp: new Date().toISOString(),
        models: [],
        features: {
            main: [],
            additional: []
        },
        deepThink: {
            available: false,
            activated: false
        },
        deepResearch: {
            available: false,
            activated: false
        }
    };
    
    // ===== „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ =====
    const wait = ms => new Promise(resolve => setTimeout(resolve, ms));
    
    const log = (message, type = 'INFO') => {
        const prefix = {
            'INFO': 'üìù',
            'SUCCESS': '‚úÖ',
            'WARNING': '‚ö†Ô∏è',
            'ERROR': '‚ùå',
            'CHANGE': 'üîÑ',
            'RESEARCH': 'üî¨'
        }[type] || 'üìù';
        console.log(`${prefix} ${message}`);
    };
    
    // Ë¶ÅÁ¥†„Çí„ÇØ„É™„ÉÉ„ÇØ
    const clickElement = async (element) => {
        if (!element) return false;
        
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        await wait(100);
        
        // „ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´
        element.click();
        await wait(500);
        
        return true;
    };
    
    // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
    const closeMenu = async () => {
        // ESC„Ç≠„Éº„ÇíÈÄÅ‰ø°
        const event = new KeyboardEvent('keydown', { 
            key: 'Escape', 
            code: 'Escape', 
            keyCode: 27,
            bubbles: true 
        });
        document.dispatchEvent(event);
        await wait(200);
        
        // „Ç™„Éº„Éê„Éº„É¨„Ç§„Çí„ÇØ„É™„ÉÉ„ÇØ
        const overlay = document.querySelector('.cdk-overlay-backdrop');
        if (overlay) {
            overlay.click();
        } else {
            document.body.click();
        }
        await wait(500);
    };
    
    // ===== „É™„Çµ„Éº„ÉÅÊ©üËÉΩ =====
    
    // 1. „É¢„Éá„É´„ÅÆ„É™„Çµ„Éº„ÉÅ
    const researchModels = async () => {
        log('„É¢„Éá„É´„É°„Éã„É•„Éº„Çí„É™„Çµ„Éº„ÉÅ‰∏≠...', 'RESEARCH');
        
        // „É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÇíË§áÊï∞„ÅÆ„Çª„É¨„ÇØ„Çø„ÅßÊé¢„Åô
        const modelButtonSelectors = [
            '[aria-label*="„É¢„Éá„É´"]',
            '.mode-selector-button',
            '.gds-mode-switch-button',
            'button[aria-haspopup="menu"]:has(.model-name)',
            'button:has(mat-icon[fonticon="arrow_drop_down"])'
        ];
        
        let modelButton = null;
        for (const selector of modelButtonSelectors) {
            try {
                modelButton = document.querySelector(selector);
                if (modelButton) {
                    log(`„É¢„Éá„É´„Éú„Çø„É≥„ÇíÁô∫Ë¶ã: ${selector}`, 'SUCCESS');
                    break;
                }
            } catch (e) {
                // „Çª„É¨„ÇØ„Çø„Ç®„É©„Éº„ÇíÁÑ°Ë¶ñ
            }
        }
        
        if (!modelButton) {
            log('„É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
            return;
        }
        
        // „É°„Éã„É•„Éº„ÇíÈñã„Åè
        await clickElement(modelButton);
        await wait(1000);
        
        // „É¢„Éá„É´È†ÖÁõÆ„ÇíÂèñÂæó
        const modelItemSelectors = [
            '.bard-mode-list-button',
            '[role="menuitemradio"]',
            '[role="menuitem"]:has(.gds-label-m)',
            'mat-action-list button:has(.gds-label-m-alt)'
        ];
        
        let modelItems = [];
        for (const selector of modelItemSelectors) {
            modelItems = document.querySelectorAll(selector);
            if (modelItems.length > 0) {
                log(`„É¢„Éá„É´„Ç¢„Ç§„ÉÜ„É†„ÇíÁô∫Ë¶ã: ${selector} (${modelItems.length}ÂÄã)`, 'SUCCESS');
                break;
            }
        }
        
        modelItems.forEach(item => {
            // „Çø„Ç§„Éà„É´„Å®Ë™¨Êòé„ÇíÂèñÂæó
            const titleEl = item.querySelector('.gds-label-m:not(.gds-label-m-alt)') || 
                          item.querySelector('.mode-title');
            const descEl = item.querySelector('.gds-label-m-alt') || 
                         item.querySelector('.mode-desc');
            
            // ÈÅ∏ÊäûÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            const isSelected = item.querySelector('mat-icon[fonticon="check_circle"]') !== null ||
                             item.classList.contains('is-selected') || 
                             item.getAttribute('aria-checked') === 'true';
            
            if (titleEl && descEl) {
                const modelData = {
                    title: titleEl.textContent.trim(),
                    description: descEl.textContent.trim(),
                    selected: isSelected
                };
                
                // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
                if (!currentData.models.some(m => m.description === modelData.description)) {
                    currentData.models.push(modelData);
                    log(`„É¢„Éá„É´Ê§úÂá∫: ${modelData.title} - ${modelData.description}${isSelected ? ' (ÈÅ∏Êäû‰∏≠)' : ''}`, 'SUCCESS');
                }
            }
        });
        
        // „Äå‰ªñ„ÅÆ„É¢„Éá„É´„Äç„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        const moreModelsItem = Array.from(modelItems).find(item => 
            item.textContent?.includes('‰ªñ„ÅÆ„É¢„Éá„É´') || 
            item.textContent?.includes('„Åï„Çâ„Å´Ë°®Á§∫')
        );
        
        if (moreModelsItem) {
            log('„Äå‰ªñ„ÅÆ„É¢„Éá„É´„Äç„É°„Éã„É•„Éº„ÇíÊ§úÂá∫', 'INFO');
            await clickElement(moreModelsItem);
            await wait(1000);
            
            // „Çµ„Éñ„É°„Éã„É•„Éº„ÅÆ„É¢„Éá„É´„ÇíÂèñÂæó
            const subMenuItems = document.querySelectorAll('[role="menuitem"]');
            subMenuItems.forEach(item => {
                const titleEl = item.querySelector('.gds-label-m:not(.gds-label-m-alt)');
                const descEl = item.querySelector('.gds-label-m-alt');
                
                if (titleEl && descEl) {
                    const modelData = {
                        title: titleEl.textContent.trim(),
                        description: descEl.textContent.trim(),
                        selected: false,
                        additional: true
                    };
                    
                    if (!currentData.models.some(m => m.description === modelData.description)) {
                        currentData.models.push(modelData);
                        log(`ËøΩÂä†„É¢„Éá„É´Ê§úÂá∫: ${modelData.title} - ${modelData.description}`, 'SUCCESS');
                    }
                }
            });
        }
        
        await closeMenu();
    };
    
    // 2. Ê©üËÉΩ„ÅÆ„É™„Çµ„Éº„ÉÅ
    const researchFeatures = async () => {
        log('Ê©üËÉΩ„Çí„É™„Çµ„Éº„ÉÅ‰∏≠...', 'RESEARCH');
        
        // „É°„Ç§„É≥„ÅÆÊ©üËÉΩ„Éú„Çø„É≥„ÇíÂèñÂæó
        const mainFeatureSelectors = [
            'toolbox-drawer-item button',
            '.toolbox-drawer-item-button',
            'toolbox-drawer button:has(.label)'
        ];
        
        for (const selector of mainFeatureSelectors) {
            const mainFeatures = document.querySelectorAll(selector);
            if (mainFeatures.length > 0) {
                log(`„É°„Ç§„É≥Ê©üËÉΩ„ÇíÁô∫Ë¶ã: ${selector} (${mainFeatures.length}ÂÄã)`, 'SUCCESS');
                
                mainFeatures.forEach(button => {
                    const labelEl = button.querySelector('.toolbox-drawer-button-label, .label, .gds-label-l');
                    const iconEl = button.querySelector('mat-icon');
                    
                    if (labelEl) {
                        const label = labelEl.textContent.trim();
                        // „Äå„Åù„ÅÆ‰ªñ„Äç„Éú„Çø„É≥„ÅØÈô§Â§ñ
                        if (label && label !== '„Åù„ÅÆ‰ªñ' && label !== 'more_horiz') {
                            const featureData = {
                                name: label,
                                icon: iconEl ? (iconEl.getAttribute('fonticon') || iconEl.textContent.trim()) : null,
                                type: 'main',
                                enabled: false
                            };
                            
                            // Deep Think „Å® Deep Research „ÅÆÁâπÂà•„Å™Âà§ÂÆö
                            if (label === 'Deep Think') {
                                currentData.deepThink.available = true;
                            } else if (label === 'Deep Research') {
                                currentData.deepResearch.available = true;
                            }
                            
                            currentData.features.main.push(featureData);
                            log(`„É°„Ç§„É≥Ê©üËÉΩÊ§úÂá∫: ${label}`, 'SUCCESS');
                        }
                    }
                });
                break;
            }
        }
        
        // „Äå„Åù„ÅÆ‰ªñ„Äç„É°„Éã„É•„Éº„ÇíÈñã„Åè
        const moreButtonSelectors = [
            '[aria-label="„Åù„ÅÆ‰ªñ"]',
            'mat-icon[fonticon="more_horiz"]'
        ];
        
        let moreButton = null;
        for (const selector of moreButtonSelectors) {
            const element = document.querySelector(selector);
            if (element) {
                moreButton = element.closest('button') || element;
                if (moreButton) {
                    log(`„Åù„ÅÆ‰ªñ„Éú„Çø„É≥„ÇíÁô∫Ë¶ã: ${selector}`, 'SUCCESS');
                    break;
                }
            }
        }
        
        if (moreButton) {
            log('„Åù„ÅÆ‰ªñ„ÅÆÊ©üËÉΩ„ÇíÁ¢∫Ë™ç‰∏≠...', 'RESEARCH');
            await clickElement(moreButton);
            await wait(1000);
            
            // „Åù„ÅÆ‰ªñ„ÅÆÊ©üËÉΩ„ÇíÂèñÂæó - „Ç™„Éº„Éê„Éº„É¨„Ç§ÂÜÖ„ÇíÊé¢„Åô
            const overlaySelectors = [
                '.cdk-overlay-pane .toolbox-drawer-card',
                '.cdk-overlay-pane mat-card',
                '.toolbox-drawer-card'
            ];
            
            let overlayCard = null;
            for (const selector of overlaySelectors) {
                overlayCard = document.querySelector(selector);
                if (overlayCard) {
                    log(`„Ç™„Éº„Éê„Éº„É¨„Ç§„Ç´„Éº„Éâ„ÇíÁô∫Ë¶ã: ${selector}`, 'SUCCESS');
                    break;
                }
            }
            
            if (overlayCard) {
                const additionalFeatures = overlayCard.querySelectorAll(
                    '.toolbox-drawer-menu-item button, .toolbox-drawer-item-list-button, mat-list-item'
                );
                
                additionalFeatures.forEach(button => {
                    const iconEl = button.querySelector('mat-icon');
                    const labelEl = button.querySelector('.gds-label-l, .label');
                    const sublabelEl = button.querySelector('.gds-label-m-alt, .sublabel');
                    
                    if (labelEl) {
                        const featureData = {
                            name: labelEl.textContent.trim(),
                            sublabel: sublabelEl ? sublabelEl.textContent.trim() : null,
                            icon: iconEl ? (iconEl.getAttribute('fonticon') || iconEl.textContent.trim()) : null,
                            type: 'additional',
                            enabled: false
                        };
                        
                        // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
                        if (!currentData.features.additional.some(f => f.name === featureData.name)) {
                            currentData.features.additional.push(featureData);
                            log(`ËøΩÂä†Ê©üËÉΩÊ§úÂá∫: ${featureData.name}${featureData.sublabel ? ` (${featureData.sublabel})` : ''}`, 'SUCCESS');
                        }
                    }
                });
            }
            
            await closeMenu();
        }
    };
    
    // 3. Deep Think„É¢„Éº„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    const checkDeepThink = async () => {
        log('Deep Think„É¢„Éº„Éâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...', 'RESEARCH');
        
        // Deep Think„Éú„Çø„É≥„ÇíÊé¢„Åô
        const deepThinkButton = Array.from(document.querySelectorAll('button'))
            .find(btn => btn.textContent?.includes('Deep Think'));
        
        if (deepThinkButton) {
            currentData.deepThink.available = true;
            
            // ÊúâÂäπÂåñÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºà„ÇØ„É©„Çπ„ÇÑariaÂ±ûÊÄß„ÅßÂà§ÂÆöÔºâ
            const isActive = deepThinkButton.classList.contains('active') ||
                           deepThinkButton.getAttribute('aria-pressed') === 'true';
            
            currentData.deepThink.activated = isActive;
            log(`Deep Think„É¢„Éº„Éâ: ${isActive ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ'}`, 'SUCCESS');
        } else {
            log('Deep Think„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'INFO');
        }
    };
    
    // 4. Deep Research„É¢„Éº„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    const checkDeepResearch = async () => {
        log('Deep Research„É¢„Éº„Éâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...', 'RESEARCH');
        
        // Deep Research„Éú„Çø„É≥„ÇíÊé¢„Åô
        const deepResearchButton = Array.from(document.querySelectorAll('button'))
            .find(btn => btn.textContent?.includes('Deep Research'));
        
        if (deepResearchButton) {
            currentData.deepResearch.available = true;
            
            // ÊúâÂäπÂåñÁä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            const isActive = deepResearchButton.classList.contains('active') ||
                           deepResearchButton.getAttribute('aria-pressed') === 'true';
            
            currentData.deepResearch.activated = isActive;
            log(`Deep Research„É¢„Éº„Éâ: ${isActive ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ'}`, 'SUCCESS');
            
            // Deep Research„ÅØÂÆüË°å„Å´ÊôÇÈñì„Åå„Åã„Åã„Çã„Åì„Å®„ÇíË≠¶Âëä
            if (isActive) {
                log('‚ö†Ô∏è Deep Research„ÅØÊúÄÂ§ß40ÂàÜ„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô', 'WARNING');
            }
        } else {
            log('Deep Research„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'INFO');
        }
    };
    
    // 5. ÂâçÂõû„Éá„Éº„Çø„Å®„ÅÆÊØîËºÉ
    const compareWithPrevious = () => {
        log('\nÂâçÂõû„Éá„Éº„Çø„Å®„ÅÆÊØîËºÉ...', 'INFO');
        
        // LocalStorage„Åã„ÇâÂâçÂõû„Éá„Éº„Çø„ÇíÂèñÂæó
        let previousData = null;
        let isFirstRun = false;
        
        try {
            const stored = localStorage.getItem(STORAGE_KEY);
            if (stored) {
                previousData = JSON.parse(stored);
            } else {
                isFirstRun = true;
            }
        } catch (e) {
            log('ÂâçÂõû„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Ç®„É©„Éº', 'WARNING');
            isFirstRun = true;
        }
        
        if (!previousData) {
            log('ÂâçÂõû„Éá„Éº„Çø„Å™„ÅóÔºàÂàùÂõûÂÆüË°åÔºâ', 'INFO');
            return { hasChanges: false, changes: [], isFirstRun: true };
        }
        
        const changes = [];
        
        // „É¢„Éá„É´„ÅÆÊØîËºÉ
        const prevModels = previousData.models || [];
        const currModels = currentData.models;
        
        // Êñ∞„Åó„ÅèËøΩÂä†„Åï„Çå„Åü„É¢„Éá„É´
        currModels.forEach(curr => {
            const prev = prevModels.find(p => p.description === curr.description);
            if (!prev) {
                changes.push(`Êñ∞Ë¶è„É¢„Éá„É´ËøΩÂä†: ${curr.title} - ${curr.description}`);
            } else if (prev.selected !== curr.selected) {
                changes.push(`„É¢„Éá„É´ÈÅ∏ÊäûÁä∂ÊÖãÂ§âÊõ¥: ${curr.title} (${prev.selected ? 'ÈÅ∏Êäû' : 'ÈùûÈÅ∏Êäû'} ‚Üí ${curr.selected ? 'ÈÅ∏Êäû' : 'ÈùûÈÅ∏Êäû'})`);
            }
        });
        
        // ÂâäÈô§„Åï„Çå„Åü„É¢„Éá„É´
        prevModels.forEach(prev => {
            if (!currModels.find(c => c.description === prev.description)) {
                changes.push(`„É¢„Éá„É´ÂâäÈô§: ${prev.title} - ${prev.description}`);
            }
        });
        
        // „É°„Ç§„É≥Ê©üËÉΩ„ÅÆÊØîËºÉ
        const prevMainFeatures = previousData.features?.main || [];
        const currMainFeatures = currentData.features.main;
        
        currMainFeatures.forEach(curr => {
            const prev = prevMainFeatures.find(p => p.name === curr.name);
            if (!prev) {
                changes.push(`Êñ∞Ë¶è„É°„Ç§„É≥Ê©üËÉΩËøΩÂä†: ${curr.name}`);
            }
        });
        
        prevMainFeatures.forEach(prev => {
            if (!currMainFeatures.find(c => c.name === prev.name)) {
                changes.push(`„É°„Ç§„É≥Ê©üËÉΩÂâäÈô§: ${prev.name}`);
            }
        });
        
        // ËøΩÂä†Ê©üËÉΩ„ÅÆÊØîËºÉ
        const prevAdditionalFeatures = previousData.features?.additional || [];
        const currAdditionalFeatures = currentData.features.additional;
        
        currAdditionalFeatures.forEach(curr => {
            const prev = prevAdditionalFeatures.find(p => p.name === curr.name);
            if (!prev) {
                changes.push(`Êñ∞Ë¶èËøΩÂä†Ê©üËÉΩ: ${curr.name}${curr.sublabel ? ` (${curr.sublabel})` : ''}`);
            }
        });
        
        prevAdditionalFeatures.forEach(prev => {
            if (!currAdditionalFeatures.find(c => c.name === prev.name)) {
                changes.push(`ËøΩÂä†Ê©üËÉΩÂâäÈô§: ${prev.name}`);
            }
        });
        
        // Deep Think„É¢„Éº„Éâ„ÅÆÊØîËºÉ
        const prevDeepThink = previousData.deepThink;
        const currDeepThink = currentData.deepThink;
        
        if (prevDeepThink) {
            if (prevDeepThink.available !== currDeepThink.available) {
                changes.push(`Deep Think„É¢„Éº„Éâ: ${currDeepThink.available ? 'Âà©Áî®ÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åó„Åü' : 'Âà©Áî®‰∏çÂèØ„Å´„Å™„Çä„Åæ„Åó„Åü'}`);
            }
        } else if (currDeepThink.available) {
            changes.push('Deep Think„É¢„Éº„Éâ: Êñ∞Ë¶èÊ§úÂá∫');
        }
        
        // Deep Research„É¢„Éº„Éâ„ÅÆÊØîËºÉ
        const prevDeepResearch = previousData.deepResearch;
        const currDeepResearch = currentData.deepResearch;
        
        if (prevDeepResearch) {
            if (prevDeepResearch.available !== currDeepResearch.available) {
                changes.push(`Deep Research„É¢„Éº„Éâ: ${currDeepResearch.available ? 'Âà©Áî®ÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åó„Åü' : 'Âà©Áî®‰∏çÂèØ„Å´„Å™„Çä„Åæ„Åó„Åü'}`);
            }
        } else if (currDeepResearch.available) {
            changes.push('Deep Research„É¢„Éº„Éâ: Êñ∞Ë¶èÊ§úÂá∫');
        }
        
        return {
            hasChanges: changes.length > 0,
            changes: changes,
            isFirstRun: false
        };
    };
    
    // ===== „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞ =====
    async function executeResearch() {
        try {
            // „É¢„Éá„É´„ÅÆ„É™„Çµ„Éº„ÉÅ
            await researchModels();
            await wait(1000);
            
            // Ê©üËÉΩ„ÅÆ„É™„Çµ„Éº„ÉÅ
            await researchFeatures();
            await wait(1000);
            
            // Deep Think„É¢„Éº„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
            await checkDeepThink();
            await wait(500);
            
            // Deep Research„É¢„Éº„Éâ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
            await checkDeepResearch();
            await wait(500);
            
            // ÂâçÂõû„Éá„Éº„Çø„Å®„ÅÆÊØîËºÉ
            const comparison = compareWithPrevious();
            
            // ÁµêÊûú„ÅÆË°®Á§∫
            console.log('\n' + '='.repeat(80));
            console.log('„É™„Çµ„Éº„ÉÅÁµêÊûú„Çµ„Éû„É™„Éº');
            console.log('='.repeat(80));
            
            console.log('\nüìä Ê§úÂá∫„Åï„Çå„Åü„É¢„Éá„É´:');
            if (currentData.models.length === 0) {
                console.log('  ‚ö†Ô∏è „É¢„Éá„É´„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü');
            } else {
                currentData.models.forEach(m => {
                    const selectedMark = m.selected ? ' ‚úÖ (ÈÅ∏Êäû‰∏≠)' : '';
                    const additionalMark = m.additional ? ' (ËøΩÂä†„É¢„Éá„É´)' : '';
                    console.log(`  ‚Ä¢ ${m.title} - ${m.description}${selectedMark}${additionalMark}`);
                });
            }
            
            console.log('\nüìä Ê§úÂá∫„Åï„Çå„ÅüÊ©üËÉΩ:');
            if (currentData.features.main.length > 0) {
                console.log('  „É°„Ç§„É≥Ê©üËÉΩ:');
                currentData.features.main.forEach(f => {
                    console.log(`    ‚Ä¢ ${f.name}${f.icon ? ` (${f.icon})` : ''}`);
                });
            }
            
            if (currentData.features.additional.length > 0) {
                console.log('  ËøΩÂä†Ê©üËÉΩÔºà„Åù„ÅÆ‰ªñ„É°„Éã„É•„ÉºÔºâ:');
                currentData.features.additional.forEach(f => {
                    const sublabel = f.sublabel ? ` - ${f.sublabel}` : '';
                    console.log(`    ‚Ä¢ ${f.name}${sublabel}${f.icon ? ` (${f.icon})` : ''}`);
                });
            }
            
            console.log('\nüî¨ ÁâπÊÆä„É¢„Éº„Éâ:');
            console.log(`  ‚Ä¢ Deep Think: ${currentData.deepThink.available ? '‚úÖ Âà©Áî®ÂèØËÉΩ' : '‚ùå Âà©Áî®‰∏çÂèØ'}`);
            console.log(`  ‚Ä¢ Deep Research: ${currentData.deepResearch.available ? '‚úÖ Âà©Áî®ÂèØËÉΩ' : '‚ùå Âà©Áî®‰∏çÂèØ'}`);
            
            // Â§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆÂá¶ÁêÜ
            if (comparison.hasChanges && !comparison.isFirstRun) {
                console.log('\n' + '='.repeat(80));
                console.log('üîÑ Â§âÊõ¥Ê§úÂá∫ÔºÅ');
                console.log('='.repeat(80));
                
                comparison.changes.forEach(change => {
                    log(change, 'CHANGE');
                });
                
                console.log('\n‚ÑπÔ∏è „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàURL:');
                console.log(`üìù ${SPREADSHEET_URL}`);
            } else if (comparison.isFirstRun) {
                console.log('\n‚úÖ ÂàùÂõûÂÆüË°åÂÆå‰∫Ü - „Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü');
                console.log('üìù ‰ªäÂæå„ÄÅÂ§âÊõ¥„ÅåÊ§úÂá∫„Åï„Çå„ÅüÂ†¥Âêà„Å´„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å∏„ÅÆÁôªÈå≤„Çí‰øÉ„Åó„Åæ„Åô');
            } else if (!comparison.hasChanges) {
                console.log('\n‚úÖ ÂâçÂõû„Åã„ÇâÂ§âÊõ¥„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
            }
            
            // „Éá„Éº„Çø„Çí‰øùÂ≠ò
            localStorage.setItem(STORAGE_KEY, JSON.stringify(currentData));
            log('\n„Éá„Éº„Çø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'SUCCESS');
            
            // Ë©≥Á¥∞„Éá„Éº„Çø„ÅÆ„Ç®„ÇØ„Çπ„Éù„Éº„ÉàÔºà„Éá„Éê„ÉÉ„Ç∞Áî®Ôºâ
            console.log('\nüìÅ Ë©≥Á¥∞„Éá„Éº„ÇøÔºàJSONÂΩ¢ÂºèÔºâ:');
            console.log(JSON.stringify(currentData, null, 2));
            
            // ÁµêÊûú„ÇíËøî„Åô
            return {
                success: true,
                data: currentData,
                comparison: comparison
            };
            
        } catch (error) {
            log(`„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error.message}`, 'ERROR');
            console.error(error);
            return {
                success: false,
                error: error.message
            };
        }
    }
    
    // ===== „Ç®„ÇØ„Çπ„Éù„Éº„Éà =====
    window.GeminiResearchDetector = {
        executeResearch: executeResearch,
        getCurrentData: () => currentData,
        getStoredData: () => {
            try {
                const stored = localStorage.getItem(STORAGE_KEY);
                return stored ? JSON.parse(stored) : null;
            } catch (e) {
                return null;
            }
        },
        clearStoredData: () => {
            localStorage.removeItem(STORAGE_KEY);
            log('‰øùÂ≠ò„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢„Åó„Åæ„Åó„Åü', 'SUCCESS');
        }
    };
    
    // Ëá™ÂãïÂÆüË°åÔºàAIÂ§âÊõ¥Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÂëº„Å∞„Çå„ÅüÂ†¥ÂêàÔºâ
    if (window.AIChangeDetector && window.AIChangeDetector.autoRun) {
        console.log('\nü§ñ AIÂ§âÊõ¥Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†„Åã„ÇâÂÆüË°å„Åï„Çå„Åæ„Åó„Åü');
        executeResearch().then(result => {
            if (window.AIChangeDetector.callback) {
                window.AIChangeDetector.callback('gemini', result);
            }
        });
    } else {
        console.log('\n' + '='.repeat(80));
        console.log('Gemini „É™„Çµ„Éº„ÉÅÊ§úÂá∫Âô®„ÅåÂàùÊúüÂåñ„Åï„Çå„Åæ„Åó„Åü');
        console.log('ÂÆüË°åÊñπÊ≥ï: GeminiResearchDetector.executeResearch()');
        console.log('='.repeat(80));
    }
    
})();
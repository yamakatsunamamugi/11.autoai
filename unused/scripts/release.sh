#!/bin/bash

# „É™„É™„Éº„Çπ„Çπ„ÇØ„É™„Éó„Éà
# ‰ΩøÁî®ÊñπÊ≥ï: ./scripts/release.sh [patch|minor|major|prerelease]

set -e

# Ëâ≤ÂÆöÁæ©
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# „Éê„Éº„Ç∏„Éß„É≥„Çø„Ç§„Éó
VERSION_TYPE=${1:-patch}

echo -e "${BLUE}üöÄ 11.autoai Release Script${NC}"
echo "================================"

# ÁèæÂú®„ÅÆ„Éñ„É©„É≥„ÉÅ„ÇíÁ¢∫Ë™ç
CURRENT_BRANCH=$(git branch --show-current)
echo -e "Current branch: ${YELLOW}$CURRENT_BRANCH${NC}"

# main„Éñ„É©„É≥„ÉÅ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØË≠¶Âëä
if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "master" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Not on main branch${NC}"
    read -p "Continue anyway? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo -e "${RED}Release cancelled${NC}"
        exit 1
    fi
fi

# Êú™„Ç≥„Éü„ÉÉ„Éà„ÅÆÂ§âÊõ¥„Åå„Å™„ÅÑ„ÅãÁ¢∫Ë™ç
if ! git diff-index --quiet HEAD --; then
    echo -e "${RED}‚ùå Error: Uncommitted changes detected${NC}"
    echo "Please commit or stash your changes before releasing"
    exit 1
fi

# „É™„É¢„Éº„Éà„Å®ÂêåÊúü
echo -e "\n${BLUE}üì• Fetching latest changes...${NC}"
git fetch origin

# „ÉÜ„Çπ„ÉàÂÆüË°å
echo -e "\n${BLUE}üß™ Running tests...${NC}"
npm test || {
    echo -e "${RED}‚ùå Tests failed${NC}"
    exit 1
}

# „É™„É≥„ÉàÂÆüË°å
echo -e "\n${BLUE}üîç Running lint...${NC}"
npm run lint || {
    echo -e "${RED}‚ùå Lint failed${NC}"
    exit 1
}

# ÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÂèñÂæó
CURRENT_VERSION=$(node -p "require('./package.json').version")
echo -e "\n${BLUE}üìå Current version: ${YELLOW}v$CURRENT_VERSION${NC}"

# Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÇíË®àÁÆó
echo -e "\n${BLUE}üìù Bumping version (${VERSION_TYPE})...${NC}"
npm version $VERSION_TYPE --no-git-tag-version

# Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÇíÂèñÂæó
NEW_VERSION=$(node -p "require('./package.json').version")
echo -e "${GREEN}‚úÖ New version: v$NEW_VERSION${NC}"

# manifest.json„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇÇÊõ¥Êñ∞
echo -e "\n${BLUE}üìã Updating manifest.json...${NC}"
node -e "
const fs = require('fs');
const manifest = JSON.parse(fs.readFileSync('./manifest.json', 'utf8'));
manifest.version = '$NEW_VERSION';
fs.writeFileSync('./manifest.json', JSON.stringify(manifest, null, 2) + '\\n');
console.log('‚úÖ manifest.json updated');
"

# CHANGELOGÁîüÊàê
echo -e "\n${BLUE}üìù Generating CHANGELOG...${NC}"
cat > CHANGELOG_NEW.md << EOF
# v$NEW_VERSION - $(date +%Y-%m-%d)

## üéâ What's New

EOF

# ÊúÄËøë„ÅÆ„Ç≥„Éü„ÉÉ„Éà„Åã„ÇâÂ§âÊõ¥ÂÜÖÂÆπ„ÇíÊäΩÂá∫
git log v$CURRENT_VERSION..HEAD --pretty=format:"- %s" >> CHANGELOG_NEW.md

echo "" >> CHANGELOG_NEW.md
echo "" >> CHANGELOG_NEW.md

# Êó¢Â≠ò„ÅÆCHANGELOG„Å´ËøΩÂä†
if [ -f CHANGELOG.md ]; then
    cat CHANGELOG.md >> CHANGELOG_NEW.md
    mv CHANGELOG_NEW.md CHANGELOG.md
else
    mv CHANGELOG_NEW.md CHANGELOG.md
fi

echo -e "${GREEN}‚úÖ CHANGELOG updated${NC}"

# „Éì„É´„ÉâÂÆüË°å
echo -e "\n${BLUE}üî® Building extension...${NC}"
NODE_ENV=production npm run build:prod || {
    echo -e "${RED}‚ùå Build failed${NC}"
    exit 1
}

# Â§âÊõ¥„Çí„Ç≥„Éü„ÉÉ„Éà
echo -e "\n${BLUE}üíæ Committing changes...${NC}"
git add -A
git commit -m "chore(release): v$NEW_VERSION

- Update version to $NEW_VERSION
- Update CHANGELOG
- Build production assets

[skip ci]"

# „Çø„Ç∞„Çí‰ΩúÊàê
echo -e "\n${BLUE}üè∑Ô∏è  Creating tag...${NC}"
git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION

$(git log v$CURRENT_VERSION..HEAD --pretty=format:"- %s")"

echo -e "${GREEN}‚úÖ Tag v$NEW_VERSION created${NC}"

# „Éó„ÉÉ„Ç∑„É•Á¢∫Ë™ç
echo -e "\n${YELLOW}üì§ Ready to push to remote${NC}"
echo "This will:"
echo "  1. Push commits to origin/$CURRENT_BRANCH"
echo "  2. Push tag v$NEW_VERSION"
echo "  3. Trigger GitHub Actions deployment"

read -p "Continue? (y/N): " -n 1 -r
echo

if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo -e "\n${BLUE}üì§ Pushing to remote...${NC}"
    git push origin $CURRENT_BRANCH
    git push origin "v$NEW_VERSION"

    echo -e "\n${GREEN}‚úÖ Release v$NEW_VERSION completed successfully!${NC}"
    echo ""
    echo "Next steps:"
    echo "  1. Check GitHub Actions: https://github.com/yamakatsunamamugi/11.autoai/actions"
    echo "  2. Verify Chrome Web Store submission"
    echo "  3. Create release notes on GitHub"
    echo ""
    echo -e "${BLUE}üéâ Congratulations on the release!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Push cancelled. Changes are committed locally.${NC}"
    echo "To push manually:"
    echo "  git push origin $CURRENT_BRANCH"
    echo "  git push origin v$NEW_VERSION"
fi
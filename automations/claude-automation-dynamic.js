/**
 * @fileoverview ClaudeËá™ÂãïÂåñÈñ¢Êï∞ - ÂãïÁöÑÊ§úÁ¥¢ÂØæÂøúÁâà
 * 
 * „ÄêÂΩπÂâ≤„Äë
 * ClaudeÂ∞ÇÁî®„ÅÆËá™ÂãïÂåñÂá¶ÁêÜ„ÇíÊèê‰æõ
 * 
 * „Äê‰∏ªË¶ÅÊ©üËÉΩ„Äë
 * - ClaudeÂõ∫Êúâ„ÅÆ„É¢„Éá„É´ÈÅ∏ÊäûÔºàOpus 4.1„ÄÅSonnet 4„ÄÅHaiku 3.5„Å™„Å©Ôºâ
 * - ClaudeÂõ∫Êúâ„ÅÆÊ©üËÉΩÈÅ∏ÊäûÔºà„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã„ÄÅ„Ç¶„Çß„ÉñÊ§úÁ¥¢„ÄÅDriveÊ§úÁ¥¢„Å™„Å©Ôºâ
 * - „É¢„Éá„É´Âêç„ÉªÊ©üËÉΩÂêç„ÅÆ„Ç®„Ç§„É™„Ç¢„ÇπÂØæÂøúÔºàÁï•Áß∞„ÇÑ„Çø„Ç§„Éù„Å´ÂØæÂøúÔºâ
 * - CanvasÊ©üËÉΩ„ÅÆ„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
 * 
 * „Äê‰æùÂ≠òÈñ¢‰øÇ„Äë
 * - common-ai-handler.js: window.AIHandler„Çí‰ΩøÁî®
 * - ui-selectors.js: ClaudeÁî®„Çª„É¨„ÇØ„Çø„Çí‰ΩøÁî®
 * - claude-deepresearch-selector.js: DeepResearchÈÅ∏Êäû„É≠„Ç∏„ÉÉ„ÇØ
 * 
 * „Äê„Ç∞„É≠„Éº„Éê„É´ÂÖ¨Èñã„Äë
 * window.ClaudeAutomation: „Ç≥„É≥„ÇΩ„Éº„É´„Åã„ÇâÁõ¥Êé•Âëº„Å≥Âá∫„ÅóÂèØËÉΩ
 */
(() => {
  "use strict";

  // common-ai-handler.js„ÅÆAIHandler„Çí‰ΩøÁî®
  const useAIHandler = window.AIHandler;  // common-ai-handler.js„Å´„Çà„Å£„Å¶Êèê‰æõ„Åï„Çå„Çã
  
  // ========================================
  // „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞
  // ========================================
  let sendStartTime = null;  // ÈÄÅ‰ø°ÈñãÂßãÊôÇÂàª„ÇíË®òÈå≤
  let menuHandler = null;  // common-ai-handler.js„ÅÆMenuHandler„Ç§„É≥„Çπ„Çø„É≥„Çπ

  // ========================================
  // Ë®≠ÂÆö
  // ========================================
  const CONFIG = {
    DELAYS: {
      click: 50,
      menuOpen: 1500,
      menuClose: 1000,
      modelSwitch: 2000,
      submit: 5000,
      responseCheck: 5000,
      elementSearch: 500
    },
    MODEL_ALIASES: {
      'opus 4.1': 'Opus 4.1',
      'opus4.1': 'Opus 4.1',
      'opus41': 'Opus 4.1',
      'opus 41': 'Opus 4.1',
      'opas 4.1': 'Opus 4.1',
      'opas4.1': 'Opus 4.1',
      'opus 4,1': 'Opus 4.1',
      'opus4,1': 'Opus 4.1',
      '4.1': 'Opus 4.1',
      '41': 'Opus 4.1',
      '4,1': 'Opus 4.1',
      'opus': 'Opus 4.1',
      'opas': 'Opus 4.1',
      'sonnet 4': 'Sonnet 4',
      'sonnet4': 'Sonnet 4',
      'sonet 4': 'Sonnet 4',
      'sonet4': 'Sonnet 4',
      'sonnett 4': 'Sonnet 4',
      'sonnett4': 'Sonnet 4',
      'sonett 4': 'Sonnet 4',
      'sonnet': 'Sonnet 4',
      'sonet': 'Sonnet 4',
      '4': 'Sonnet 4',
      'opus 4': 'Opus 4',
      'opus4': 'Opus 4',
      'opas 4': 'Opus 4',
      'opas4': 'Opus 4',
      'sonnet 3.7': 'Sonnet 3.7',
      'sonnet3.7': 'Sonnet 3.7',
      'sonnet37': 'Sonnet 3.7',
      'sonnet 37': 'Sonnet 3.7',
      'sonet 3.7': 'Sonnet 3.7',
      'sonet3.7': 'Sonnet 3.7',
      'sonnet 3,7': 'Sonnet 3.7',
      'sonnet3,7': 'Sonnet 3.7',
      '3.7': 'Sonnet 3.7',
      '37': 'Sonnet 3.7',
      '3,7': 'Sonnet 3.7',
      'haiku 3.5': 'Haiku 3.5',
      'haiku3.5': 'Haiku 3.5',
      'haiku35': 'Haiku 3.5',
      'haiku 35': 'Haiku 3.5',
      'haiku 3,5': 'Haiku 3.5',
      'haiku3,5': 'Haiku 3.5',
      'haiku': 'Haiku 3.5',
      'haikuu': 'Haiku 3.5',
      '3.5': 'Haiku 3.5',
      '35': 'Haiku 3.5',
      '3,5': 'Haiku 3.5'
    },
    FUNCTION_ALIASES: {
      '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      '„Åò„Å£„Åè„Çä': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      'ÊÄùËÄÉ': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      'ÊÄùËÄÉ„É¢„Éº„Éâ': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      'thinking': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      'think': '„Åò„Å£„Åè„ÇäËÄÉ„Åà„Çã',
      '„Ç¶„Çß„ÉñÊ§úÁ¥¢': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'webÊ§úÁ¥¢': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'Ê§úÁ¥¢': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'Ê§úÁ¥¢„É¢„Éº„Éâ': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'search': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'web': '„Ç¶„Çß„ÉñÊ§úÁ¥¢',
      'driveÊ§úÁ¥¢': 'DriveÊ§úÁ¥¢',
      'drive': 'DriveÊ§úÁ¥¢',
      '„Éâ„É©„Ç§„Éñ': 'DriveÊ§úÁ¥¢',
      'googledrive': 'DriveÊ§úÁ¥¢',
      'gmailÊ§úÁ¥¢': 'GmailÊ§úÁ¥¢',
      'gmail': 'GmailÊ§úÁ¥¢',
      '„É°„Éº„É´': 'GmailÊ§úÁ¥¢',
      'mail': 'GmailÊ§úÁ¥¢',
      '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢': '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢',
      '„Ç´„É¨„É≥„ÉÄ„Éº': '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢',
      'calendar': '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢',
      'cal': '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢',
      '„É™„Çµ„Éº„ÉÅ': '„É™„Çµ„Éº„ÉÅ',
      'research': '„É™„Çµ„Éº„ÉÅ',
      'deep': '„É™„Çµ„Éº„ÉÅ',
      'deepresearch': '„É™„Çµ„Éº„ÉÅ',
      'deepreserch': '„É™„Çµ„Éº„ÉÅ',
      '„Éá„Ç£„Éº„Éó': '„É™„Çµ„Éº„ÉÅ',
      '„Éá„Ç£„Éº„Éó„É™„Çµ„Éº„ÉÅ': '„É™„Çµ„Éº„ÉÅ',
      '„Åß„ÅÉ„Éº„Å∑': '„É™„Çµ„Éº„ÉÅ',
      'deepresarch': '„É™„Çµ„Éº„ÉÅ',
      'deepserch': '„É™„Çµ„Éº„ÉÅ',
      'deepsearch': '„É™„Çµ„Éº„ÉÅ',
      'Ë™øÊüª': '„É™„Çµ„Éº„ÉÅ',
      'Ë©≥Á¥∞Ë™øÊüª': '„É™„Çµ„Éº„ÉÅ',
      'Ë©≥„Åó„ÅèË™øÊüª': '„É™„Çµ„Éº„ÉÅ'
    }
  };

  const EXCLUDE_FROM_GENERAL_SEARCH = ['GmailÊ§úÁ¥¢', 'DriveÊ§úÁ¥¢', '„Ç´„É¨„É≥„ÉÄ„ÉºÊ§úÁ¥¢'];

  // ========================================
  // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
  // ========================================
  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));

  // ========================================
  // Êã°Âºµ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†
  // ========================================
  const LogLevel = {
    TRACE: 0,
    DEBUG: 1,
    INFO: 2,
    WARN: 3,
    ERROR: 4,
    FATAL: 5
  };

  let logConfig = {
    level: LogLevel.INFO,
    enableConsole: true,
    enableStorage: true,
    maxStorageEntries: 1000,
    includeStackTrace: false,
    includeTimestamp: true,
    includePerformance: true
  };

  let logStorage = [];
  let sessionId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);
  let operationContext = null;
  let performanceMetrics = new Map();

  const logTypeConfig = {
    'TRACE': { level: LogLevel.TRACE, prefix: 'üî¨', color: '#888' },
    'DEBUG': { level: LogLevel.DEBUG, prefix: 'üîç', color: '#007ACC' },
    'INFO': { level: LogLevel.INFO, prefix: 'üìù', color: '#0078D4' },
    'SUCCESS': { level: LogLevel.INFO, prefix: '‚úÖ', color: '#107C10' },
    'WARN': { level: LogLevel.WARN, prefix: '‚ö†Ô∏è', color: '#FF8C00' },
    'WARNING': { level: LogLevel.WARN, prefix: '‚ö†Ô∏è', color: '#FF8C00' },
    'ERROR': { level: LogLevel.ERROR, prefix: '‚ùå', color: '#D13438' },
    'FATAL': { level: LogLevel.FATAL, prefix: 'üíÄ', color: '#8B0000' },
    'SEARCH': { level: LogLevel.INFO, prefix: 'üîé', color: '#0078D4' },
    'PERFORMANCE': { level: LogLevel.INFO, prefix: '‚ö°', color: '#FF6B35' },
    'NETWORK': { level: LogLevel.DEBUG, prefix: 'üåê', color: '#6264A7' },
    'DOM': { level: LogLevel.DEBUG, prefix: 'üèóÔ∏è', color: '#5C2D91' },
    'USER_ACTION': { level: LogLevel.INFO, prefix: 'üë§', color: '#8764B8' },
    'AUTOMATION': { level: LogLevel.INFO, prefix: 'ü§ñ', color: '#00BCF2' }
  };

  function formatTimestamp() {
    const now = new Date();
    return now.toISOString().replace('T', ' ').substr(0, 23);
  }

  function formatDuration(startTime) {
    const duration = Date.now() - startTime;
    if (duration < 1000) return `${duration}ms`;
    if (duration < 60000) return `${(duration / 1000).toFixed(2)}s`;
    return `${(duration / 60000).toFixed(2)}m`;
  }

  function getStackTrace() {
    if (!logConfig.includeStackTrace) return null;
    const stack = new Error().stack;
    return stack ? stack.split('\n').slice(3, 8).join('\n') : null;
  }

  function createLogEntry(message, type, context = {}) {
    const typeInfo = logTypeConfig[type] || logTypeConfig['INFO'];
    
    const entry = {
      timestamp: Date.now(),
      sessionId,
      level: typeInfo.level,
      type,
      message,
      context: {
        operation: operationContext,
        ...context
      }
    };

    if (logConfig.includeTimestamp) {
      entry.formattedTime = formatTimestamp();
    }

    if (logConfig.includeStackTrace && typeInfo.level >= LogLevel.WARN) {
      entry.stackTrace = getStackTrace();
    }

    return entry;
  }

  function shouldLog(type) {
    const typeInfo = logTypeConfig[type] || logTypeConfig['INFO'];
    return typeInfo.level >= logConfig.level;
  }

  function storeLogEntry(entry) {
    if (!logConfig.enableStorage) return;
    
    logStorage.push(entry);
    
    if (logStorage.length > logConfig.maxStorageEntries) {
      logStorage = logStorage.slice(-logConfig.maxStorageEntries);
    }
  }

  function log(message, type = 'INFO', context = {}) {
    if (!shouldLog(type)) return;

    const typeInfo = logTypeConfig[type] || logTypeConfig['INFO'];
    const entry = createLogEntry(message, type, context);
    
    storeLogEntry(entry);

    // Êã°ÂºµÊ©üËÉΩ„ÅÆ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†„Å´ÈÄÅ‰ø°
    const logData = {
      source: 'Claude',
      level: type,
      message: message,
      timestamp: new Date().toISOString(),
      context: context,
      operation: operationContext
    };

    // Êã°ÂºµÊ©üËÉΩ„ÅÆLogManager„Å´ÈÄÅ‰ø°ÔºàÊ≠£„Åó„ÅÑÂΩ¢Âºè„ÅßÔºâ
    if (window.chrome && window.chrome.runtime) {
      try {
        window.chrome.runtime.sendMessage({
          action: 'LOG_AI_MESSAGE',
          aiType: 'Claude',
          message: message,
          options: {
            level: type.toLowerCase(),
            metadata: {
              operation: operationContext,
              ...context
            }
          }
        }).catch(() => {
          // „Ç®„É©„Éº„ÇíÁÑ°Ë¶ñÔºàÊã°ÂºµÊ©üËÉΩ„ÅåÁÑ°Âäπ„Å™Â†¥ÂêàÔºâ
        });
      } catch (e) {
        // chrome.runtime „ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁÑ°Ë¶ñ
      }
    }

    // Êã°ÂºµÊ©üËÉΩÂ∞ÇÁî®„ÅÆ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ‰ΩøÁî®
    if (logConfig.extensionLogger && typeof logConfig.extensionLogger === 'function') {
      try {
        logConfig.extensionLogger('Claude', type, message, context);
      } catch (e) {
        // Êã°ÂºµÊ©üËÉΩ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„ÅÆ„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ
      }
    }

    if (logConfig.enableConsole) {
      const timeStr = logConfig.includeTimestamp ? `[${formatTimestamp()}] ` : '';
      const contextStr = operationContext ? `[${operationContext}] ` : '';
      const fullMessage = `${typeInfo.prefix} ${timeStr}[Claude] ${contextStr}${message}`;
      
      if (typeInfo.level >= LogLevel.ERROR) {
        console.error(fullMessage, context);
        if (entry.stackTrace) console.error(entry.stackTrace);
      } else if (typeInfo.level >= LogLevel.WARN) {
        console.warn(fullMessage, context);
      } else {
        console.log(fullMessage, context);
      }
    }
  }

  function startOperation(operationName, details = {}) {
    operationContext = operationName;
    const startTime = Date.now();
    performanceMetrics.set(operationName, { startTime, details });
    
    log(`ÈñãÂßã: ${operationName}`, 'AUTOMATION', details);
    return startTime;
  }

  function endOperation(operationName, result = {}) {
    const metrics = performanceMetrics.get(operationName);
    if (metrics) {
      const duration = Date.now() - metrics.startTime;
      const context = {
        duration: formatDuration(metrics.startTime),
        durationMs: duration,
        ...metrics.details,
        result
      };
      
      log(`ÂÆå‰∫Ü: ${operationName} (${formatDuration(metrics.startTime)})`, 'PERFORMANCE', context);
      performanceMetrics.delete(operationName);
    }
    
    if (operationContext === operationName) {
      operationContext = null;
    }
  }

  function logPerformance(operationName, startTime, details = {}) {
    const duration = Date.now() - startTime;
    const context = {
      duration: formatDuration(startTime),
      durationMs: duration,
      ...details
    };
    log(`„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ: ${operationName}`, 'PERFORMANCE', context);
  }

  function logError(error, context = {}) {
    const errorContext = {
      name: error.name,
      message: error.message,
      stack: error.stack,
      ...context
    };
    log(`„Ç®„É©„ÉºÁô∫Áîü: ${error.message}`, 'ERROR', errorContext);
  }

  function logUserAction(action, target, details = {}) {
    const context = {
      action,
      target,
      ...details
    };
    log(`„É¶„Éº„Ç∂„Éº„Ç¢„ÇØ„Ç∑„Éß„É≥: ${action} -> ${target}`, 'USER_ACTION', context);
  }

  function logDOMOperation(operation, selector, result, details = {}) {
    const context = {
      operation,
      selector,
      result,
      ...details
    };
    log(`DOMÊìç‰Ωú: ${operation} (${selector})`, 'DOM', context);
  }

  function logNetworkOperation(operation, url, result, details = {}) {
    const context = {
      operation,
      url,
      result,
      ...details
    };
    log(`„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ: ${operation} (${url})`, 'NETWORK', context);
  }

  const findElement = async (selectors, condition = null, maxWait = 3000) => {
    const startTime = Date.now();
    const operationId = `findElement_${Date.now()}`;
    
    log(`Ë¶ÅÁ¥†Ê§úÁ¥¢ÈñãÂßã: ${JSON.stringify(selectors)}`, 'DOM', {
      selectors,
      maxWait,
      hasCondition: !!condition
    });

    while (Date.now() - startTime < maxWait) {
      for (const selector of selectors) {
        try {
          const elements = document.querySelectorAll(selector);
          logDOMOperation('querySelectorAll', selector, `${elements.length}ÂÄã„ÅÆË¶ÅÁ¥†`, {
            elementsFound: elements.length
          });

          for (const element of elements) {
            if (!condition || condition(element)) {
              const duration = Date.now() - startTime;
              log(`Ë¶ÅÁ¥†Ê§úÁ¥¢ÊàêÂäü: ${selector}`, 'SUCCESS', {
                selector,
                duration: `${duration}ms`,
                elementTag: element.tagName,
                elementId: element.id,
                elementClass: element.className
              });
              return element;
            }
          }
        } catch (e) {
          logError(e, { selector, operation: 'findElement' });
        }
      }
      await wait(CONFIG.DELAYS.elementSearch);
    }

    const totalDuration = Date.now() - startTime;
    log(`Ë¶ÅÁ¥†Ê§úÁ¥¢Â§±Êïó: „Çø„Ç§„É†„Ç¢„Ç¶„Éà`, 'ERROR', {
      selectors,
      duration: `${totalDuration}ms`,
      maxWait
    });
    return null;
  };

  const performClick = async (element) => {
    if (!element) {
      log('„ÇØ„É™„ÉÉ„ÇØÂ§±Êïó: Ë¶ÅÁ¥†„Åånull', 'ERROR');
      return false;
    }

    const startTime = Date.now();
    const elementInfo = {
      tag: element.tagName,
      id: element.id,
      class: element.className,
      text: element.textContent?.substring(0, 100)
    };

    log('Ë¶ÅÁ¥†„ÇØ„É™„ÉÉ„ÇØÈñãÂßã', 'USER_ACTION', elementInfo);

    try {
      const rect = element.getBoundingClientRect();
      const x = rect.left + rect.width / 2;
      const y = rect.top + rect.height / 2;

      logUserAction('pointerdown', `${elementInfo.tag}#${elementInfo.id}`, {
        coordinates: { x, y },
        elementRect: rect
      });

      element.dispatchEvent(new PointerEvent('pointerdown', {
        bubbles: true,
        cancelable: true,
        view: window,
        clientX: x,
        clientY: y,
        pointerId: 1
      }));

      await wait(CONFIG.DELAYS.click);

      logUserAction('pointerup', `${elementInfo.tag}#${elementInfo.id}`, {
        coordinates: { x, y },
        delay: CONFIG.DELAYS.click
      });

      element.dispatchEvent(new PointerEvent('pointerup', {
        bubbles: true,
        cancelable: true,
        view: window,
        clientX: x,
        clientY: y,
        pointerId: 1
      }));

      element.click();
      
      logPerformance('performClick', startTime, elementInfo);
      log('Ë¶ÅÁ¥†„ÇØ„É™„ÉÉ„ÇØÊàêÂäü', 'SUCCESS', {
        ...elementInfo,
        duration: `${Date.now() - startTime}ms`
      });
      
      return true;
    } catch (e) {
      logError(e, { 
        operation: 'performClick',
        element: elementInfo,
        duration: `${Date.now() - startTime}ms`
      });
      return false;
    }
  };

  const waitForMenu = async (maxWait = 3000) => {
    const menuSelectors = [
      '[role="menu"][data-state="open"]',
      '[role="menu"]',
      '.relative.w-full.will-change-transform',
      '[class*="will-change-transform"]',
      '.flex.flex-col.min-h-0.w-full',
      '.p-1\\.5.flex.flex-col',
      'div[style*="max-height"]'
    ];
    return await findElement(menuSelectors, null, maxWait);
  };


  function findFunctionByName(functions, searchTerm) {
    if (!searchTerm) return null;

    const normalized = searchTerm.toLowerCase().replace(/\s+/g, '');
    const targetFromAlias = CONFIG.FUNCTION_ALIASES[normalized];

    if (normalized === 'Ê§úÁ¥¢' || normalized === 'search') {
      for (const func of functions) {
        if (func.text === '„Ç¶„Çß„ÉñÊ§úÁ¥¢') {
          log('„ÄåÊ§úÁ¥¢„Äç‚Üí„Äå„Ç¶„Çß„ÉñÊ§úÁ¥¢„Äç„Å®„Åó„Å¶Âá¶ÁêÜ', 'INFO');
          return func;
        }
      }
    }

    if (targetFromAlias) {
      for (const func of functions) {
        if (func.text === targetFromAlias) {
          return func;
        }
      }
    }

    for (const func of functions) {
      const funcNormalized = func.text.toLowerCase().replace(/\s+/g, '');
      if (funcNormalized === normalized) {
        return func;
      }
    }

    for (const func of functions) {
      if (EXCLUDE_FROM_GENERAL_SEARCH.includes(func.text)) {
        continue;
      }

      const funcNormalized = func.text.toLowerCase().replace(/\s+/g, '');
      if (funcNormalized.includes(normalized) || normalized.includes(funcNormalized)) {
        return func;
      }
    }

    return null;
  }

  // ========================================
  // ÂãïÁöÑÊ©üËÉΩÈÅ∏Êäû
  // ========================================
  async function selectFunction(functionName, enable = true) {
    const operationName = 'selectFunction';
    const startTime = startOperation(operationName, {
      functionName,
      enable,
      timestamp: new Date().toISOString()
    });

    // „Äå„Å™„ÅóÔºàÈÄöÂ∏∏„É¢„Éº„ÉâÔºâ„Äç„ÅÆÂá¶ÁêÜ„ÇíËøΩÂä†
    if (functionName === '„Å™„ÅóÔºàÈÄöÂ∏∏„É¢„Éº„ÉâÔºâ' || 
        functionName === '„Å™„Åó' || 
        functionName === 'none' || 
        !functionName) {
      log('Ê©üËÉΩ„ÇíÁÑ°ÂäπÂåñ„Åó„Åæ„ÅôÔºàÈÄöÂ∏∏„É¢„Éº„ÉâÔºâ', 'INFO');
      endOperation(operationName, { success: true, action: 'disabled' });
      return true;
    }

    // „É¨„Éù„Éº„ÉàÂåñ„ÅØÊ©üËÉΩ„É°„Éã„É•„Éº„Åß„ÅØ„Å™„ÅÑ„ÅÆ„Åß„Çπ„Ç≠„ÉÉ„Éó
    if (functionName === '„É¨„Éù„Éº„ÉàÂåñ' || functionName === '„É¨„Éù„Éº„Éà' || 
        functionName === 'report' || functionName === 'reporting') {
      log('„Äå„É¨„Éù„Éº„ÉàÂåñ„Äç„ÅØClaude„ÅÆÊ©üËÉΩ„É°„Éã„É•„Éº„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åô', 'INFO');
      endOperation(operationName, { success: true, action: 'skipped', reason: 'not_a_claude_feature' });
      return true;
    }

    log(`Ê©üËÉΩ„ÇíÂãïÁöÑÊ§úÁ¥¢: ${functionName}`, 'SEARCH', { functionName, enable });
    
    // AIHandler„Çí‰ΩøÁî®
    if (!useAIHandler || !menuHandler) {
      const error = 'AIHandler„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì';
      log(error, 'ERROR');
      endOperation(operationName, { success: false, error });
      return false;
    }

    try {
      // „Ç®„Ç§„É™„Ç¢„Çπ„ÇíËß£Ê±∫
      const normalizedInput = functionName.toLowerCase().replace(/\s+/g, '');
      const targetFunction = CONFIG.FUNCTION_ALIASES[normalizedInput] || functionName;
      
      log('„Ç®„Ç§„É™„Ç¢„ÇπËß£Ê±∫ÂÆå‰∫Ü', 'DEBUG', {
        original: functionName,
        normalized: normalizedInput,
        resolved: targetFunction
      });
      
      // DeepResearchÁâπÂà•Âá¶ÁêÜ
      const isDeepResearch = window.FeatureConstants ? 
        window.FeatureConstants.isDeepResearch(functionName) :
        (normalizedInput === 'deepresearch' || functionName === 'DeepResearch' || CONFIG.FUNCTION_ALIASES[normalizedInput] === '„É™„Çµ„Éº„ÉÅ');
      
      if (isDeepResearch) {
        log('DeepResearch„É¢„Éº„Éâ„ÇíÊúâÂäπÂåñ„Åó„Åæ„Åô', 'INFO');
        log('DeepResearch„ÅØÊúÄÂ§ß40ÂàÜ„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô', 'WARNING', {
          estimatedDuration: 'ÊúÄÂ§ß40ÂàÜ',
          functionType: 'DeepResearch'
        });
        
        // ÂÖ±Êúâ„É¢„Ç∏„É•„Éº„É´„Çí‰ΩøÁî®„Åó„Å¶DeepResearch„ÇíÈÅ∏Êäû
        if (window.ClaudeDeepResearchSelector && window.ClaudeDeepResearchSelector.select) {
          log('ClaudeDeepResearchSelector„Çí‰ΩøÁî®', 'DEBUG');
          const result = await window.ClaudeDeepResearchSelector.select();
          
          if (result.success) {
            if (result.alreadyEnabled) {
              log('DeepResearch„ÅØÊó¢„Å´ÊúâÂäπ„Åß„Åô', 'INFO');
              endOperation(operationName, { success: true, alreadyEnabled: true });
            } else {
              log('DeepResearch„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü', 'SUCCESS');
              endOperation(operationName, { success: true, action: 'enabled' });
            }
            return true;
          } else {
            const error = 'DeepResearch„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì';
            log(error, 'ERROR');
            endOperation(operationName, { success: false, error });
            return false;
          }
        } else {
          const error = 'ClaudeDeepResearchSelector„É¢„Ç∏„É•„Éº„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì';
          log(error, 'ERROR');
          endOperation(operationName, { success: false, error });
          return false;
        }
      }
      
      log('ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„ÅßÊ©üËÉΩÈÅ∏ÊäûÂÆüË°å', 'DEBUG', { targetFunction, enable });
      
      const result = await menuHandler.selectFunction(targetFunction, enable);
      
      if (result) {
        const message = `ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„ÅßÊ©üËÉΩ„Äå${targetFunction}„Äç„Çí${enable ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ'}„Å´„Åó„Åæ„Åó„Åü`;
        log(message, 'SUCCESS');
        endOperation(operationName, { 
          success: true, 
          targetFunction, 
          enable,
          method: 'menuHandler'
        });
        return true;
      } else {
        // Ë©≥Á¥∞„Å™Â§±ÊïóÁêÜÁî±„ÇíÂèñÂæó
        const failureReason = menuHandler.getLastFailureReason ? menuHandler.getLastFailureReason() : '‰∏çÊòé';
        const error = `ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß„ÅÆÊ©üËÉΩÈÅ∏Êäû„Å´Â§±Êïó: ${failureReason}`;
        log(error, 'WARNING', { 
          targetFunction, 
          enable,
          failureReason,
          functionName: targetFunction // „Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàË°®Á§∫„ÇíÈÅø„Åë„Çã„Åü„ÇÅÊòéÁ§∫ÁöÑ„Å´ËøΩÂä†
        });
        log('Ê©üËÉΩÈÅ∏ÊäûÂ§±Êïó„ÇíÁÑ°Ë¶ñ„Åó„Å¶Âá¶ÁêÜ„ÇíÁ∂ôÁ∂ö„Åó„Åæ„Åô', 'INFO');
        endOperation(operationName, { success: true, error, targetFunction, enable, failureReason });
        return true;
      }
    } catch (error) {
      logError(error, { 
        operation: 'selectFunction',
        functionName,
        enable
      });
      endOperation(operationName, { success: false, error: error.message });
      return false;
    }
  }

  async function clickResearchButton() {
    log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶„ÅÑ„Åæ„ÅôÔºà„É°„Éã„É•„ÉºÂ§ñÔºâ...', 'SEARCH');

    const allButtons = document.querySelectorAll('button');
    let researchButton = null;

    for (const button of allButtons) {
      const text = button.textContent?.trim();
      const hasAriaPressed = button.hasAttribute('aria-pressed');

      if (text && text.includes('„É™„Çµ„Éº„ÉÅ') && hasAriaPressed) {
        const hasSvg = button.querySelector('svg');
        if (hasSvg) {
          researchButton = button;
          log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÇíÁô∫Ë¶ã', 'SUCCESS');
          break;
        }
      }
    }

    if (researchButton) {
      const isPressed = researchButton.getAttribute('aria-pressed') === 'true';

      if (isPressed) {
        log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÅØÊó¢„Å´ON„Åß„Åô', 'SUCCESS');
      } else {
        log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÇíON„Å´„Åó„Åæ„Åô', 'INFO');
        await performClick(researchButton);
        await wait(500);

        const newState = researchButton.getAttribute('aria-pressed') === 'true';
        if (newState) {
          log('DeepResearch„É¢„Éº„Éâ„ÅåÊúâÂäπ„Å´„Å™„Çä„Åæ„Åó„Åü', 'SUCCESS');
        } else {
          log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÅÆONÂåñ„Å´Â§±Êïó„Åó„ÅüÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô', 'WARNING');
        }
      }

      return true;
    }

    log('„É™„Çµ„Éº„ÉÅ„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
    return false;
  }

  // ========================================
  // ÂãïÁöÑ„É¢„Éá„É´ÈÅ∏ÊäûÔºàÊîπÂñÑÁâàÔºâ
  // ========================================
  async function selectModel(identifier) {
    const operationName = 'selectModel';
    const startTime = startOperation(operationName, {
      identifier,
      timestamp: new Date().toISOString()
    });

    if (!identifier) {
      const error = '„É¢„Éá„É´Ë≠òÂà•Â≠ê„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì';
      log(error, 'ERROR');
      endOperation(operationName, { success: false, error });
      return false;
    }

    log(`„É¢„Éá„É´„ÇíÂãïÁöÑÊ§úÁ¥¢: ${identifier}`, 'SEARCH', { identifier });
    
    // AIHandler„Çí‰ΩøÁî®
    if (!useAIHandler || !menuHandler) {
      const error = 'AIHandler„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì';
      log(error, 'ERROR');
      endOperation(operationName, { success: false, error });
      return false;
    }

    try {
      // "first"„ÅÆÂ†¥Âêà„ÅØ‰∏ÄÁï™‰∏ä„ÅÆ„É¢„Éá„É´„ÇíÈÅ∏Êäû
      if (identifier === 'first') {
        // „É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÇíÊé¢„Åô
        const modelButtonSelectors = window.AIHandler?.getSelectors?.('Claude', 'MODEL_BUTTON') || 
          ['[data-testid="model-selector-button"]', 'button[aria-label*="„É¢„Éá„É´"]'];
        
        const modelButton = await findElement(modelButtonSelectors);
        if (!modelButton) {
          const error = '„É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì';
          log(error, 'ERROR');
          endOperation(operationName, { success: false, error });
          return false;
        }
        
        // „É°„Éã„É•„Éº„ÇíÈñã„Åè
        modelButton.click();
        await wait(500); // 500ms„ÅÆÂõ∫ÂÆöÂæÖÊ©üÊôÇÈñì
        
        // „É°„Éã„É•„ÉºÈ†ÖÁõÆ„ÇíÂèñÂæó
        const menuItemSelectors = window.AIHandler?.getSelectors?.('Claude', 'MENU_ITEM') || 
          ['[role="option"]', '[role="menuitem"]', '[role="menuitemradio"]'];
        let menuItems = [];
        for (const selector of menuItemSelectors) {
          menuItems.push(...document.querySelectorAll(selector));
        }
        
        if (menuItems.length > 0) {
          // ‰∏ÄÁï™ÊúÄÂàù„ÅÆ„É°„Éã„É•„ÉºÈ†ÖÁõÆ„ÇíÈÅ∏Êäû
          const firstItem = menuItems[0];
          log(`‰∏ÄÁï™‰∏ä„ÅÆ„É¢„Éá„É´„ÇíÈÅ∏Êäû: ${firstItem.textContent?.trim()}`, 'INFO');
          firstItem.click();
          await wait(500); // 500ms„ÅÆÂõ∫ÂÆöÂæÖÊ©üÊôÇÈñì
          
          log(`‰∏ÄÁï™‰∏ä„ÅÆ„É¢„Éá„É´ÈÅ∏ÊäûÊàêÂäü: ${firstItem.textContent?.trim()}`, 'SUCCESS');
          endOperation(operationName, { success: true, model: firstItem.textContent?.trim() });
          return true;
        }
        
        log('‰∏ÄÁï™‰∏ä„ÅÆ„É¢„Éá„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
        endOperation(operationName, { success: false, error: '‰∏ÄÁï™‰∏ä„ÅÆ„É¢„Éá„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì' });
        return false;
      }
      
      // „Ç®„Ç§„É™„Ç¢„Çπ„ÇíËß£Ê±∫
      const targetModel = CONFIG.MODEL_ALIASES[identifier.toLowerCase()] || identifier;
      
      log('„É¢„Éá„É´„Ç®„Ç§„É™„Ç¢„ÇπËß£Ê±∫ÂÆå‰∫Ü', 'DEBUG', {
        original: identifier,
        resolved: targetModel
      });

      log('ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß„É¢„Éá„É´ÈÅ∏ÊäûÂÆüË°å', 'DEBUG', { targetModel });
      const result = await menuHandler.selectModel(targetModel);
      
      if (result) {
        const message = `ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß„É¢„Éá„É´„Äå${targetModel}„Äç„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`;
        log(message, 'SUCCESS');
        endOperation(operationName, { 
          success: true, 
          targetModel,
          originalIdentifier: identifier
        });
        return true;
      } else {
        const error = 'ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß„ÅÆ„É¢„Éá„É´ÈÅ∏Êäû„Å´Â§±Êïó';
        log(error, 'ERROR', { targetModel });
        endOperation(operationName, { success: false, error, targetModel });
        return false;
      }
    } catch (error) {
      logError(error, { 
        operation: 'selectModel',
        identifier
      });
      endOperation(operationName, { success: false, error: error.message });
      return false;
    }
  }

  // ========================================
  // „Çπ„Éà„É¨„Éº„Ç∏‰øùÂ≠òÊ©üËÉΩ
  // ========================================
  async function saveToStorage(data) {
    try {
      if (chrome?.storage?.local) {
        // Êó¢Â≠ò„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
        const result = await new Promise((resolve) => {
          chrome.storage.local.get(['ai_config_persistence'], (result) => {
            resolve(result.ai_config_persistence || {});
          });
        });
        
        // Claude„ÅÆË®≠ÂÆö„ÇíÊõ¥Êñ∞
        result.claude = data;
        
        // „Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò
        await new Promise((resolve) => {
          chrome.storage.local.set({ ai_config_persistence: result }, resolve);
        });
        
        log('üíæ Ë®≠ÂÆö„Çí„Çπ„Éà„É¨„Éº„Ç∏„Å´‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'SUCCESS');
      }
    } catch (error) {
      log(`„Çπ„Éà„É¨„Éº„Ç∏‰øùÂ≠ò„Ç®„É©„Éº: ${error.message}`, 'ERROR');
    }
  }

  // ========================================
  // Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´‰∏ÄË¶ßÂèñÂæó
  // ========================================
  async function getAvailableModels() {
    log('üìã Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´„ÇíÂèñÂæó‰∏≠...', 'INFO');
    
    // AIHandler„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ‰ΩøÁî®
    if (useAIHandler && menuHandler) {
      try {
        const models = await menuHandler.getAvailableModels();
        if (models && models.length > 0) {
          log(`‚úÖ ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß${models.length}ÂÄã„ÅÆ„É¢„Éá„É´„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü`, 'SUCCESS');
          return models;
        }
      } catch (error) {
        log(`ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Ç®„É©„Éº„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô: ${error.message}`, 'WARNING');
      }
    }

    try {
      // „É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÇíÊé¢„Åô
      const modelButtonSelectors = [
        '[aria-label="„É¢„Éá„É´„ÇíÈÅ∏Êäû"]',
        '[data-testid="model-selector"]',
        'button[aria-haspopup="menu"]'
      ];

      const modelButton = await findElement(modelButtonSelectors);

      if (!modelButton) {
        log('‚ùå „É¢„Éá„É´ÈÅ∏Êäû„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
        return [];
      }

      // ÁèæÂú®„ÅÆ„É¢„Éá„É´„ÇíË®òÈå≤
      const currentModelText = modelButton.textContent?.trim();
      log(`ÁèæÂú®„ÅÆ„É¢„Éá„É´: ${currentModelText}`, 'INFO');

      // „É°„Éã„É•„Éº„ÇíÈñã„Åè
      await performClick(modelButton);
      await wait(CONFIG.DELAYS.menuOpen);

      // „É¢„Éá„É´„É°„Éã„É•„Éº„ÅåÈñã„ÅÑ„Åü„ÅãÁ¢∫Ë™ç
      const menuItemSelectors = window.AIHandler?.getSelectors?.('Claude', 'MENU_ITEM') || ['[role="option"]', '[role="menuitem"]'];
      let modelOptions = [];
      for (const selector of menuItemSelectors) {
        modelOptions.push(...document.querySelectorAll(selector));
      }
      const models = [];

      for (const option of modelOptions) {
        const fullText = option.textContent?.trim();
        if (fullText) {
          // „É¢„Éá„É´Âêç„ÅÆ„Åø„ÇíÊäΩÂá∫ÔºàÊúÄÂàù„ÅÆË°å„ÄÅ„Åæ„Åü„ÅØË™¨ÊòéÊñá„ÅÆÂâç„Åæ„ÅßÔºâ
          let modelName = fullText;
          
          // Claude„ÅÆÂ†¥Âêà„ÄÅ„É¢„Éá„É´Âêç„ÅØÈÄöÂ∏∏ÊúÄÂàù„ÅÆÈÉ®ÂàÜ„Å´Âê´„Åæ„Çå„Çã
          // ‰æã: "Claude Opus 4.1ÊÉÖÂ†±„Çí..." ‚Üí "Claude Opus 4.1"
          // Ë™¨ÊòéÊñá„ÅÆÈñãÂßã„Éë„Çø„Éº„É≥„ÇíÊé¢„Åô
          const descriptionPatterns = [
            'ÊÉÖÂ†±„Çí', 'È´òÊÄßËÉΩ', '„Çπ„Éû„Éº„Éà', 'ÊúÄÈÅ©„Å™', 'È´òÈÄü„Å™', 'ËªΩÈáè„Å™', 'Â§ßË¶èÊ®°', 'Â∞èË¶èÊ®°'
          ];
          
          for (const pattern of descriptionPatterns) {
            const index = fullText.indexOf(pattern);
            if (index > 0) {
              modelName = fullText.substring(0, index).trim();
              break;
            }
          }
          
          // „Åù„Çå„Åß„ÇÇÈï∑„Åô„Åé„ÇãÂ†¥Âêà„ÅØ„ÄÅÊúÄÂàù„ÅÆ20ÊñáÂ≠óÁ®ãÂ∫¶„Å´Âà∂Èôê
          if (modelName.length > 20 && modelName.includes(' ')) {
            // „Çπ„Éö„Éº„Çπ„ÅßÂå∫Âàá„Å£„Å¶ÊúÄÂàù„ÅÆ3„Å§„ÅÆÂçòË™û„Åæ„Åß
            const words = modelName.split(' ');
            if (words.length > 3) {
              modelName = words.slice(0, 3).join(' ');
            }
          }
          
          // ÈÅ∏ÊäûÁä∂ÊÖã„ÇíÁ¢∫Ë™çÔºàaria-selected„ÄÅclass„ÄÅ„ÉÅ„Çß„ÉÉ„ÇØ„Éû„Éº„ÇØ„Å™„Å©Ôºâ
          const isSelected = option.getAttribute('aria-selected') === 'true' ||
                           option.classList.contains('selected') ||
                           option.querySelector('svg') !== null ||
                           modelName === currentModelText;

          models.push({
            name: modelName,
            element: option,
            selected: isSelected
          });
        }
      }

      // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
      document.body.dispatchEvent(new KeyboardEvent('keydown', { key: 'Escape', bubbles: true }));
      await wait(CONFIG.DELAYS.menuClose);

      // ÁµêÊûú„ÇíË°®Á§∫
      log(`‚úÖ ${models.length}ÂÄã„ÅÆ„É¢„Éá„É´„ÇíÁô∫Ë¶ã`, 'SUCCESS');
      console.log('\n===== Âà©Áî®ÂèØËÉΩ„Å™„É¢„Éá„É´ =====');
      models.forEach((model, index) => {
        const status = model.selected ? ' [ÈÅ∏Êäû‰∏≠]' : '';
        console.log(`${index + 1}. ${model.name}${status}`);
      });
      console.log('========================\n');

      return models;

    } catch (error) {
      log(`„É¢„Éá„É´‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº: ${error.message}`, 'ERROR');
      return [];
    }
  }

  // ========================================
  // Âà©Áî®ÂèØËÉΩ„Å™Ê©üËÉΩ‰∏ÄË¶ßË°®Á§∫
  // ========================================
  async function getAvailableFunctions() {
    // AIHandler„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„ÅØ‰ΩøÁî®
    if (useAIHandler && menuHandler) {
      try {
        const functions = await menuHandler.getAvailableFunctions();
        if (functions && functions.length > 0) {
          log(`‚úÖ ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Åß${functions.length}ÂÄã„ÅÆÊ©üËÉΩ„ÇíÂèñÂæó„Åó„Åæ„Åó„Åü`, 'SUCCESS');
          return functions;
        }
      } catch (error) {
        log(`ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Ç®„É©„Éº„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô: ${error.message}`, 'WARNING');
      }
    }
    
    const functions = await collectMenuFunctions();

    if (functions.length === 0) {
      log('Âà©Áî®ÂèØËÉΩ„Å™Ê©üËÉΩ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'WARNING');
      return [];
    }

    console.log('\n===== Âà©Áî®ÂèØËÉΩ„Å™Ê©üËÉΩ =====');
    functions.forEach((func, index) => {
      const status = func.hasToggle ? (func.isActive ? 'ON' : 'OFF') : '„Ç¢„ÇØ„Ç∑„Éß„É≥';
      console.log(`${index + 1}. ${func.text} [${status}]`);
    });
    console.log('========================\n');

    return functions;
  }

  // ========================================
  // „ÉÜ„Ç≠„Çπ„ÉàÈÄÅ‰ø°„ÉªÂøúÁ≠îÂæÖÊ©ü„ÉªÂøúÁ≠îÂèñÂæó
  // ========================================
  async function inputText(text) {
    if (!text) {
      log('ÂÖ•Âäõ„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà„Åå„ÅÇ„Çä„Åæ„Åõ„Çì', 'ERROR');
      return false;
    }

    log('„ÉÜ„Ç≠„Çπ„Éà„ÇíÂÖ•Âäõ‰∏≠...', 'INFO');

    const inputSelectors = [
      '[contenteditable="true"][role="textbox"]',
      '.ProseMirror',
      'div[contenteditable="true"]',
      'textarea[placeholder*="„É°„ÉÉ„Çª„Éº„Ç∏"]'
    ];

    const inputField = await findElement(inputSelectors);

    if (!inputField) {
      log('„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
      return false;
    }

    inputField.focus();
    inputField.innerHTML = `<p>${text}</p>`;
    inputField.dispatchEvent(new Event('input', { bubbles: true }));

    await wait(1000);
    log(`${text.length} ÊñáÂ≠ó„ÇíÂÖ•Âäõ„Åó„Åæ„Åó„Åü`, 'SUCCESS');
    return true;
  }

  async function sendMessage() {
    log('„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°‰∏≠...', 'INFO');

    const submitButtonSelectors = window.AIHandler?.getSelectors?.('Claude', 'SEND_BUTTON');
    
    if (!submitButtonSelectors || submitButtonSelectors.length === 0) {
      log('ÈÄÅ‰ø°„Éú„Çø„É≥„Çª„É¨„ÇØ„Çø„ÅåÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì', 'ERROR');
      return false;
    }

    const submitButton = await findElement(submitButtonSelectors);

    if (!submitButton) {
      log('ÈÄÅ‰ø°„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì', 'ERROR');
      return false;
    }

    await performClick(submitButton);
    sendStartTime = Date.now();  // ÈÄÅ‰ø°ÊôÇÂàª„ÇíË®òÈå≤
    log('üì§ „É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü', 'SUCCESS');
    await wait(CONFIG.DELAYS.submit);
    return true;
  }

  async function waitForResponse(maxWaitTime = 60000) {
    const operationName = 'waitForResponse';
    const startTime = startOperation(operationName, {
      maxWaitTime,
      sendStartTime: sendStartTime ? new Date(sendStartTime).toISOString() : null,
      timestamp: new Date().toISOString()
    });

    log(`ÂøúÁ≠îÂæÖÊ©üÈñãÂßã (ÊúÄÂ§ßÂæÖÊ©üÊôÇÈñì: ${maxWaitTime/1000}Áßí)`, 'INFO', { maxWaitTime });

    try {
      // ÂÖ±ÈÄö„Éè„É≥„Éâ„É©„Éº„Çí‰ΩøÁî®
      if (!useAIHandler || !window.AIHandler?.message?.waitForResponse) {
        const error = 'AIHandler.message.waitForResponse„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì';
        log(error, 'ERROR');
        endOperation(operationName, { success: false, error });
        return false;
      }

      const result = await window.AIHandler.message.waitForResponse(null, {
        timeout: maxWaitTime,
        sendStartTime: sendStartTime
      }, 'Claude');

      if (result) {
        log('ÂøúÁ≠îÂæÖÊ©üÂÆå‰∫Ü', 'SUCCESS', { 
          duration: formatDuration(startTime),
          result: 'success'
        });
        endOperation(operationName, { success: true, duration: Date.now() - startTime });
        return true;
      } else {
        log('ÂøúÁ≠îÂæÖÊ©ü„Çø„Ç§„É†„Ç¢„Ç¶„Éà', 'WARNING', {
          duration: formatDuration(startTime),
          maxWaitTime
        });
        endOperation(operationName, { success: false, error: 'timeout', duration: Date.now() - startTime });
        return false;
      }
    } catch (error) {
      logError(error, { 
        operation: 'waitForResponse',
        maxWaitTime,
        sendStartTime
      });
      endOperation(operationName, { success: false, error: error.message });
      return false;
    }
  }

  // CanvasÔºà„Ç¢„Éº„ÉÜ„Ç£„Éï„Ç°„ÇØ„ÉàÔºâ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂèñÂæó
  async function getCanvasContent(expandIfNeeded = true) {
    // Êó¢„Å´Â±ïÈñã„Åï„Çå„Å¶„ÅÑ„ÇãCanvas„ÇíÊé¢„Åô
    const canvasSelectors = window.AIHandler?.getSelectors?.('Claude', 'CANVAS') || { CONTAINER: ['.grid-cols-1.grid h1', '.grid-cols-1.grid'] };
    const containerSelectors = canvasSelectors.CONTAINER || ['.grid-cols-1.grid h1', '.grid-cols-1.grid'];
    let canvas = null;
    for (const selector of containerSelectors) {
      const element = document.querySelector(selector);
      if (element) {
        canvas = selector.includes('h1') ? element.closest('.grid-cols-1.grid') : element;
        if (canvas) break;
      }
    }
    
    if (!canvas && expandIfNeeded) {
      // „Éó„É¨„Éì„É•„Éº„Éú„Çø„É≥„ÇíÊé¢„Åó„Å¶Â±ïÈñã
      const previewButtonSelectors = window.AIHandler?.getSelectors?.('Claude', 'PREVIEW_BUTTON') || ['button[aria-label="ÂÜÖÂÆπ„Çí„Éó„É¨„Éì„É•„Éº"]'];
      let previewButton = null;
      for (const selector of previewButtonSelectors) {
        previewButton = document.querySelector(selector);
        if (previewButton) break;
      }
      
      if (previewButton) {
        log('Canvas„ÇíÂ±ïÈñã‰∏≠...', 'INFO');
        previewButton.click();
        await wait(1000);
        for (const selector of containerSelectors) {
          const element = document.querySelector(selector);
          if (element) {
            canvas = selector.includes('h1') ? element.closest('.grid-cols-1.grid') : element;
            if (canvas) break;
          }
        }
      }
    }
    
    if (canvas) {
      const h1 = canvas.querySelector('h1');
      const h2s = canvas.querySelectorAll('h2');
      const ps = canvas.querySelectorAll('p.whitespace-normal');
      
      return {
        success: true,
        text: canvas.textContent?.trim(),
        title: h1?.textContent?.trim(),
        sections: h2s.length,
        paragraphs: ps.length
      };
    }
    
    // „Éó„É¨„Éì„É•„Éº„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÂèñÂæóÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
    const previewSelectors = canvasSelectors.PREVIEW_TEXT || ['.absolute.inset-0'];
    let previewElement = null;
    for (const selector of previewSelectors) {
      previewElement = document.querySelector(selector);
      if (previewElement) break;
    }
    if (previewElement) {
      const text = previewElement.textContent?.trim();
      if (text && text.length > 100) {
        return {
          success: true,
          text: text,
          isPreview: true
        };
      }
    }
    
    return { success: false };
  }

  // Áµ±Âêà„ÉÜ„Çπ„Éà„Å®Âêå„Åò„É≠„Ç∏„ÉÉ„ÇØ„Çí‰ΩøÁî®„Åó„ÅügetResponseÈñ¢Êï∞Ôºàtest-claude-response-final.js „Éô„Éº„ÇπÔºâ
  async function getResponse() {
    const operationName = 'getResponse';
    const startTime = startOperation(operationName, {
      aiType: 'Claude',
      timestamp: new Date().toISOString()
    });

    log('ClaudeÂøúÁ≠î„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó‰∏≠...', 'INFO');

    try {
      // ui-selectors.js „ÅÆÂÆöÁæ©„Çí‰ΩøÁî®„Åó„Å¶ClaudeÂøúÁ≠î„ÇíÂèñÂæó
      const responseSelectors = await window.AIHandler.getSelectors('Claude', 'RESPONSE');
      log(`ui-selectors.js „Åã„ÇâÂèñÂæó„Åó„ÅüÂøúÁ≠î„Çª„É¨„ÇØ„Çø: ${responseSelectors.join(', ')}`, 'DEBUG');
      
      let finalMessages = null;
      let usedSelector = null;
      
      // ui-selectors.jsÂÆöÁæ©„ÅÆÂÖ®„Çª„É¨„ÇØ„Çø„ÇíÈ†ÜÁï™„Å´Ë©¶Ë°å
      for (const selector of responseSelectors) {
        try {
          const messages = document.querySelectorAll(selector);
          log(`„Çª„É¨„ÇØ„Çø "${selector}": ${messages.length}ÂÄã`, 'DEBUG');
          
          if (messages.length > 0) {
            finalMessages = messages;
            usedSelector = selector;
            log(`‚úÖ ‰ΩøÁî®„Çª„É¨„ÇØ„Çø: "${selector}" (${messages.length}ÂÄã„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏)`, 'DEBUG');
            break;
          }
        } catch (e) {
          log(`„Çª„É¨„ÇØ„Çø "${selector}" „Åß„Ç®„É©„Éº: ${e.message}`, 'WARNING');
        }
      }
      
      if (!finalMessages || finalMessages.length === 0) {
        const error = 'ui-selectors.js „ÅÆÂÖ®„Çª„É¨„ÇØ„Çø„ÅßClaude „É°„ÉÉ„Çª„Éº„Ç∏„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì';
        log(error, 'ERROR');
        log('‰ΩøÁî®ÂèØËÉΩ„Çª„É¨„ÇØ„Çø:', 'ERROR', { selectors: responseSelectors });
        endOperation(operationName, { success: false, error });
        return null;
      }
      
      // ÊúÄÂæå„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂèñÂæóÔºàÁµ±Âêà„ÉÜ„Çπ„ÉàÂêåÁ≠âÂá¶ÁêÜÔºâ
      const lastMessage = finalMessages[finalMessages.length - 1];
      const clone = lastMessage.cloneNode(true);
      
      log(`ÊúÄÁµÇÁöÑ„Å´‰ΩøÁî®: ${finalMessages.length}ÂÄã„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Åã„ÇâÊúÄÊñ∞„ÇíÂèñÂæó`, 'DEBUG');
      
      log(`ÊúÄÊñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá¶ÁêÜ‰∏≠...`, 'DEBUG');
      
      // ÊÄùËÄÉ„Éó„É≠„Çª„ÇπÂâäÈô§: ui-selectors.js „ÅÆ„Éò„É´„Éë„ÉºÈñ¢Êï∞„Çí‰ΩøÁî® 
      // ‚Äª ChromeÊã°ÂºµÊ©üËÉΩÁí∞Â¢É„Åß„ÅØ ui-selectors.js „Çíimport„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂêå„Åò„É≠„Ç∏„ÉÉ„ÇØ„ÇíÁõ¥Êé•ÂÆüË£Ö
      log('ÊÄùËÄÉ„Éó„É≠„Çª„ÇπË¶ÅÁ¥†„ÅÆÂâäÈô§ÈñãÂßã...', 'DEBUG');
      
      const allButtons = clone.querySelectorAll('button');
      let removedCount = 0;
      
      // ui-selectors.js „ÅÆ THINKING_PROCESS ÂÆöÁæ©„ÇíÂãïÁöÑÂèñÂæó
      const thinkingProcessSelectors = await window.AIHandler.getSelectors('Claude', 'THINKING_PROCESS');
      const thinkingPatterns = thinkingProcessSelectors?.TEXT_PATTERNS || ['ÊÄùËÄÉ„Éó„É≠„Çª„Çπ', 'Analyzed', 'Pondered', 'Thought', 'Considered', 'Evaluated', 'Reviewed'];
      const parentClasses = thinkingProcessSelectors?.PARENT_CLASSES || ['rounded-lg', 'border-0.5', 'transition-all', 'my-3'];
      
      log(`ui-selectors.js „Åã„ÇâÊÄùËÄÉ„Éó„É≠„Çª„Çπ„Éë„Çø„Éº„É≥„ÇíÂèñÂæó: ${thinkingPatterns.length}ÂÄã`, 'DEBUG');
      
      allButtons.forEach(btn => {
        const text = btn.textContent || '';
        
        // ui-selectors.js „Å®Âêå„ÅòÊÄùËÄÉ„Éó„É≠„Çª„ÇπÂà§ÂÆö„É≠„Ç∏„ÉÉ„ÇØ
        const isThinkingButton = 
          thinkingPatterns.some(pattern => text.includes(pattern)) ||
          // „Çø„Ç§„Éû„Éº„Ç¢„Ç§„Ç≥„É≥ÔºàÊôÇË®à„ÅÆSVGÔºâ„ÇíÂê´„ÇÄ„Éú„Çø„É≥„ÇÇÊÄùËÄÉ„Éó„É≠„Çª„Çπ
          btn.querySelector('svg path[d*="M10.3857 2.50977"]') !== null ||
          // tabular-nums„ÇØ„É©„ÇπÔºàÊôÇÈñìË°®Á§∫Ôºâ„ÇíÂê´„ÇÄ„Éú„Çø„É≥
          btn.querySelector('.tabular-nums') !== null;
        
        if (isThinkingButton) {
          // „Éú„Çø„É≥„ÅÆÊúÄ„ÇÇÂ§ñÂÅ¥„ÅÆË¶™Ë¶ÅÁ¥†„ÇíÊé¢„Åô
          let elementToRemove = btn;
          let parent = btn.parentElement;
          
          // ui-selectors.js „Å®Âêå„ÅòË¶™Ë¶ÅÁ¥†Êé¢Á¥¢„É≠„Ç∏„ÉÉ„ÇØ
          while (parent) {
            if (parent.classList && parentClasses.some(cls => parent.classList.contains(cls))) {
              elementToRemove = parent;
              parent = parent.parentElement;
            } else {
              break;
            }
          }
          
          log(`ÂâäÈô§: ÊÄùËÄÉ„Éó„É≠„Çª„ÇπË¶ÅÁ¥† "${text.substring(0, 30)}..."`, 'DEBUG');
          elementToRemove.remove();
          removedCount++;
        }
      });
      
      log(`ÂâäÈô§„Åó„ÅüÊÄùËÄÉ„Éó„É≠„Çª„ÇπË¶ÅÁ¥†: ${removedCount}ÂÄã`, 'DEBUG');
      
      const responseText = clone.textContent?.trim();
      
      if (responseText && responseText.length > 0) {
        const responseLength = responseText.length;
        const previewText = responseText.substring(0, 100);
        
        log(`ÂøúÁ≠îÂèñÂæóÊàêÂäü: ${responseLength}ÊñáÂ≠ó`, 'SUCCESS', {
          responseLength,
          previewText: previewText + (responseLength > 100 ? '...' : ''),
          method: 'direct-font-claude-message',
          removedThinkingElements: removedCount
        });
        
        endOperation(operationName, { 
          success: true, 
          responseLength,
          method: 'direct-claude-extraction',
          removedThinkingElements: removedCount
        });
        
        return responseText;
      } else {
        const error = 'Âá¶ÁêÜÂæå„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅåÁ©∫„Åß„Åô';
        log(error, 'ERROR', { responseText });
        endOperation(operationName, { success: false, error, responseText });
        return null;
      }
    } catch (error) {
      logError(error, { 
        operation: 'getResponse',
        aiType: 'Claude'
      });
      endOperation(operationName, { success: false, error: error.message });
      return null;
    }
  }

  // DeepResearchÂ∞ÇÁî®„ÅÆÂæÖÊ©ü„ÉªÂøúÁ≠îÈñ¢Êï∞
  const waitForClaudeDeepResearchResponse = async (maxWaitMinutes = 60) => {
    // DeepResearch„Éè„É≥„Éâ„É©„Éº„ÅåÂà©Áî®ÂèØËÉΩ„ÅãÁ¢∫Ë™ç
    if (window.DeepResearchHandler) {
      log('DeepResearch„Éè„É≥„Éâ„É©„Éº„Çí‰ΩøÁî®„Åó„Åæ„Åô', 'INFO');
      return await window.DeepResearchHandler.handle('Claude', maxWaitMinutes);
    }
    
    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÂæìÊù•„ÅÆÂÆüË£ÖÔºà‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅÊÆã„ÅôÔºâ
    log('Claude DeepResearchÂøúÁ≠î„ÇíÂæÖÊ©ü‰∏≠Ôºà„É¨„Ç¨„Ç∑„Éº„É¢„Éº„ÉâÔºâ...', 'WARNING');
    const startTime = Date.now();
    
    // ÂÅúÊ≠¢„Éú„Çø„É≥„ÅÆÊ∂àÂ§±„ÇíÂæÖ„Å§„Ç∑„É≥„Éó„É´„Å™ÂÆüË£Ö
    while (Date.now() - startTime < maxWaitMinutes * 60 * 1000) {
      try {
        const stopButtonSelectors = window.AIHandler?.getSelectors?.('Claude', 'STOP_BUTTON') || ['[aria-label="ÂøúÁ≠î„ÇíÂÅúÊ≠¢"]'];
        let stopButton = null;
        for (const selector of stopButtonSelectors) {
          stopButton = document.querySelector(selector);
          if (stopButton) break;
        }
        if (!stopButton) {
          await wait(3000);
          let finalStopCheck = null;
          for (const selector of stopButtonSelectors) {
            finalStopCheck = document.querySelector(selector);
            if (finalStopCheck) break;
          }
          if (!finalStopCheck) {
            log('Claude DeepResearchÂÆå‰∫Ü„ÇíÊ§úÂá∫', 'SUCCESS');
            return true;
          }
        }
        await wait(5000);
      } catch (error) {
        log(`DeepResearchÂÆå‰∫ÜÂæÖÊ©ü„Ç®„É©„Éº: ${error.message}`, 'WARNING');
      }
    }
    
    log('Claude DeepResearchÂæÖÊ©ü„Çø„Ç§„É†„Ç¢„Ç¶„Éà', 'WARNING');
    return false;
  };

  // ========================================
  // Áµ±ÂêàÂÆüË°åÈñ¢Êï∞
  // ========================================
  async function runAutomation(config) {
    const operationName = 'runAutomation';
    const fullStartTime = startOperation(operationName, {
      config,
      sessionId,
      timestamp: new Date().toISOString()
    });

    log('(Claude) Ëá™ÂãïÂåñÂÆüË°åÈñãÂßã', 'AUTOMATION', config);
    
    // „Çª„É´‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂê´„ÇÄË©≥Á¥∞„É≠„Ç∞
    const cellInfo = config.cellInfo || {};
    const cellPosition = cellInfo.column && cellInfo.row ? `${cellInfo.column}${cellInfo.row}` : '‰∏çÊòé';
    
    log(`üìä (Claude) Step1: „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË™≠„ÅøËæº„ÅøÈñãÂßã [${cellPosition}„Çª„É´]`, 'INFO', {
      cellPosition,
      column: cellInfo.column,
      row: cellInfo.row,
      step: 1,
      process: '„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàË™≠„ÅøËæº„Åø',
      model: config.model,
      function: config.function,
      promptLength: config.text?.length
    });

    const result = {
      success: false,
      model: null,
      function: null,
      text: null,
      response: null,
      error: null,
      timings: {}
    };

    try {
      // Step 2: „Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàê
      log(`üìã (Claude) Step2: „Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàêÈñãÂßã [${cellPosition}„Çª„É´]`, 'INFO', {
        cellPosition,
        step: 2,
        process: '„Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàê',
        model: config.model,
        function: config.function
      });
      
      // „É¢„Éá„É´ÈÅ∏Êäû
      if (config.model) {
        const modelStepStart = Date.now();
        log(`„É¢„Éá„É´ÈÅ∏Êäû„Çπ„ÉÜ„ÉÉ„ÉóÈñãÂßã: ${config.model}`, 'DEBUG');
        
        const modelResult = await selectModel(config.model);
        result.model = modelResult ? config.model : null;
        result.timings.modelSelection = Date.now() - modelStepStart;
        
        log(`„É¢„Éá„É´ÈÅ∏Êäû„Çπ„ÉÜ„ÉÉ„ÉóÂÆå‰∫Ü: ${modelResult ? 'ÊàêÂäü' : 'Â§±Êïó'}`, 
            modelResult ? 'SUCCESS' : 'ERROR', {
          model: config.model,
          success: modelResult,
          duration: `${result.timings.modelSelection}ms`
        });
        
        await wait(1000);
      }

      // „Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàêÂÆå‰∫Ü„ÅÆ„É≠„Ç∞
      log(`‚úÖ (Claude) Step2: „Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàêÂÆå‰∫Ü [${cellPosition}„Çª„É´]`, 'SUCCESS', {
        cellPosition,
        step: 2,
        process: '„Çø„Çπ„ÇØ„É™„Çπ„Éà‰ΩúÊàêÂÆå‰∫Ü'
      });
      
      // Step 3: AIÂÆüË°åÈñãÂßãÔºàÁµåÈÅéÊôÇÈñìË®àÊ∏¨ÈñãÂßãÔºâ
      const step3StartTime = Date.now();
      log(`ü§ñ (Claude) Step3: AIÂÆüË°åÈñãÂßã [${cellPosition}„Çª„É´]`, 'INFO', {
        cellPosition,
        step: 3,
        process: 'AIÂÆüË°å',
        model: config.model,
        function: config.function,
        startTime: step3StartTime
      });
      
      // Ê©üËÉΩÈÅ∏ÊäûÔºàÁ©∫ÊñáÂ≠ó„ÇÑnull„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„ÉóÔºâ
      if (config.function && config.function !== 'none' && config.function !== '') {
        const functionStepStart = Date.now();
        log(`Ê©üËÉΩÈÅ∏Êäû„Çπ„ÉÜ„ÉÉ„ÉóÈñãÂßã: ${config.function}`, 'DEBUG');
        
        const functionResult = await selectFunction(config.function);
        result.function = functionResult ? config.function : null;
        result.timings.functionSelection = Date.now() - functionStepStart;
        
        log(`Ê©üËÉΩÈÅ∏Êäû„Çπ„ÉÜ„ÉÉ„ÉóÂÆå‰∫Ü: ${functionResult ? 'ÊàêÂäü' : 'Â§±Êïó'}`, 
            functionResult ? 'SUCCESS' : 'ERROR', {
          function: config.function,
          success: functionResult,
          duration: `${result.timings.functionSelection}ms`
        });
        
        await wait(1000);
      } else if (!config.function || config.function === 'none' || config.function === '') {
        // ÈÄöÂ∏∏Âá¶ÁêÜ„ÅÆÂ†¥Âêà„ÄÅWebÊ§úÁ¥¢„ÅåÊúâÂäπ„Å´„Å™„Å£„Å¶„ÅÑ„Åü„ÇâÁÑ°ÂäπÂåñ„Åô„Çã
        log('ÈÄöÂ∏∏Âá¶ÁêÜ„É¢„Éº„Éâ: WebÊ§úÁ¥¢„ÇíÁÑ°ÂäπÂåñ„Åó„Åæ„Åô', 'INFO');
        
        // WebÊ§úÁ¥¢„ÇíÊòéÁ§∫ÁöÑ„Å´ÁÑ°ÂäπÂåñÔºàÁµ±Âêà„ÉÜ„Çπ„Éà„Åß„ÅØÂ§±Êïó„Åó„Å¶„ÇÇÁ∂ôÁ∂öÔºâ
        const webSearchOffResult = await selectFunction('„Ç¶„Çß„ÉñÊ§úÁ¥¢', false);
        if (webSearchOffResult) {
          log('‚úÖ WebÊ§úÁ¥¢„ÇíÁÑ°ÂäπÂåñ„Åó„Åæ„Åó„Åü', 'SUCCESS');
        } else {
          log('WebÊ§úÁ¥¢ÁÑ°ÂäπÂåñ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„Åå„ÄÅÂá¶ÁêÜ„ÇíÁ∂ôÁ∂ö„Åó„Åæ„Åô', 'WARNING'); // Áµ±Âêà„ÉÜ„Çπ„ÉàÂêåÁ≠â„ÅÆÂá¶ÁêÜÁ∂ôÁ∂ö
        }
        await wait(500);
      }

      // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ
      if (config.text) {
        const inputResult = await inputText(config.text);
        if (!inputResult) {
          throw new Error('„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
        result.text = config.text;
      }

      // ÈÄÅ‰ø°
      if (config.send) {
        const sendResult = await sendMessage();
        if (!sendResult) {
          throw new Error('ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
        }
        
        const step3Duration = Date.now() - step3StartTime;
        log(`‚úÖ (Claude) Step3: AIÂÆüË°åÂÆå‰∫ÜÔºàÈÄÅ‰ø°Ôºâ [${cellPosition}„Çª„É´] (${step3Duration}ms)`, 'SUCCESS', {
          cellPosition,
          step: 3,
          process: 'AIÂÆüË°åÂÆå‰∫Ü',
          promptLength: config.text?.length,
          duration: step3Duration,
          elapsedTime: `${step3Duration}ms`
        });
      }

      // Step 4: ÂøúÁ≠îÂÅúÊ≠¢„Éú„Çø„É≥Ê∂àÊªÖ„Åæ„ÅßÂæÖÊ©ü
      if (config.waitResponse) {
        const step4Duration = Date.now() - step3StartTime;
        const currentCellInfo = config.cellInfo || {};
        const currentCellPosition = currentCellInfo.column && currentCellInfo.row ? `${currentCellInfo.column}${currentCellInfo.row}` : '‰∏çÊòé';
        log(`‚è≥ (Claude) Step4: ÂøúÁ≠îÂÅúÊ≠¢„Éú„Çø„É≥Ê∂àÊªÖ„Åæ„ÅßÂæÖÊ©ü [${currentCellPosition}„Çª„É´] (${step4Duration}msÁµåÈÅé)`, 'INFO', {
          cellPosition: currentCellPosition,
          step: 4,
          process: 'ÂøúÁ≠îÂÆå‰∫ÜÂæÖÊ©ü',
          elapsedFromStep3: step4Duration,
          elapsedTime: `${step4Duration}ms`
        });
        
        const isDeepResearch = window.FeatureConstants ? 
          window.FeatureConstants.isDeepResearch(config.function) :
          (config.function === 'DeepResearch' || config.function === 'Deep Research');
        
        if (isDeepResearch) {
          log('(Claude) DeepResearch „É¢„Éº„Éâ„ÅßÂæÖÊ©ü', 'INFO');
          const waitResult = await waitForClaudeDeepResearchResponse(60);
          if (!waitResult) {
            log('(Claude) DeepResearchÂæÖÊ©ü„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„Åå„ÄÅÁ∂öË°å„Åó„Åæ„Åô', 'WARNING');
          }
        } else {
          const waitResult = await waitForResponse(config.timeout || 60000);
          if (!waitResult) {
            log('(Claude) ÂøúÁ≠îÂæÖÊ©ü„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„Åå„ÄÅÁ∂öË°å„Åó„Åæ„Åô', 'WARNING');
          }
        }
        
        const step4EndDuration = Date.now() - step3StartTime;
        const step4CellInfo = config.cellInfo || {};
        const step4CellPosition = step4CellInfo.column && step4CellInfo.row ? `${step4CellInfo.column}${step4CellInfo.row}` : '‰∏çÊòé';
        log(`‚úÖ (Claude) Step4: ÂøúÁ≠îÂÆå‰∫ÜÊ§úÂá∫ [${step4CellPosition}„Çª„É´] (${step4EndDuration}msÁµåÈÅé)`, 'SUCCESS', {
          cellPosition: step4CellPosition,
          step: 4,
          process: 'ÂøúÁ≠îÂÆå‰∫ÜÊ§úÂá∫',
          elapsedFromStep3: step4EndDuration,
          elapsedTime: `${step4EndDuration}ms`
        });
      }

      // Step 5: ÂøúÁ≠îÂèñÂæó
      if (config.getResponse) {
        const step5Duration = Date.now() - step3StartTime;
        const step5CellInfo = config.cellInfo || {};
        const step5CellPosition = step5CellInfo.column && step5CellInfo.row ? `${step5CellInfo.column}${step5CellInfo.row}` : '‰∏çÊòé';
        log(`üì§ (Claude) Step5: ÂøúÁ≠îÂèñÂæóÈñãÂßã [${step5CellPosition}„Çª„É´] (${step5Duration}msÁµåÈÅé)`, 'INFO', {
          cellPosition: step5CellPosition,
          step: 5,
          process: 'ÂøúÁ≠îÂèñÂæó',
          elapsedFromStep3: step5Duration,
          elapsedTime: `${step5Duration}ms`
        });
        
        const response = await getResponse();
        result.response = response;
        
        if (response) {
          const step5EndDuration = Date.now() - step3StartTime;
          const responsePreview = response.substring(0, 30);
          const hasMore = response.length > 30;
          log(`‚úÖ (Claude) Step5: ÂøúÁ≠îÂèñÂæóÂÆå‰∫Ü [${step5CellPosition}„Çª„É´] (${response.length}ÊñáÂ≠ó, ${step5EndDuration}msÁµåÈÅé)`, 'SUCCESS', {
            cellPosition: step5CellPosition,
            step: 5,
            process: 'ÂøúÁ≠îÂèñÂæóÂÆå‰∫Ü',
            responseLength: response.length,
            responsePreview: responsePreview + (hasMore ? '...' : ''),
            responsePreview30: responsePreview,
            hasMoreContent: hasMore,
            fullResponse: response,
            elapsedFromStep3: step5EndDuration,
            elapsedTime: `${step5EndDuration}ms`
          });
        } else {
          log(`‚ùå (Claude) Step5: ÂøúÁ≠îÂèñÂæóÂ§±Êïó [${step5CellPosition}„Çª„É´]`, 'ERROR', {
            cellPosition: step5CellPosition,
            step: 5,
            process: 'ÂøúÁ≠îÂèñÂæóÂ§±Êïó'
          });
        }
      }

      result.success = true;
      log('(Claude) Ëá™ÂãïÂåñÂÆüË°åÂÆå‰∫Ü', 'SUCCESS');

    } catch (error) {
      result.success = false;
      result.error = error.message;
      log(`(Claude) Ëá™ÂãïÂåñÂÆüË°å„Ç®„É©„Éº: ${error.message}`, 'ERROR');
    }

    return result;
  }

  // ========================================
  // Ëá™ÂãïÂ§âÊõ¥Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†
  // ========================================
  let changeDetectionState = {
    enabled: false,
    lastModelsHash: null,
    lastFunctionsHash: null,
    observer: null,
    checkInterval: null,
    callbacks: {
      onModelChange: [],
      onFunctionChange: []
    }
  };

  // „Éè„ÉÉ„Ç∑„É•ÁîüÊàêÈñ¢Êï∞
  function generateHash(data) {
    return JSON.stringify(data).split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
  }

  // „É¢„Éá„É´Â§âÊõ¥Ê§úÂá∫
  async function detectModelChanges() {
    try {
      const currentModels = await getAvailableModels();
      const currentHash = generateHash(currentModels.map(m => m.name));
      
      if (changeDetectionState.lastModelsHash !== null && 
          changeDetectionState.lastModelsHash !== currentHash) {
        
        log('üîÑ „É¢„Éá„É´Â§âÊõ¥„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü', 'WARNING');
        
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å
        changeDetectionState.callbacks.onModelChange.forEach(callback => {
          try {
            callback(currentModels);
          } catch (error) {
            log(`„É¢„Éá„É´Â§âÊõ¥„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„Ç®„É©„Éº: ${error.message}`, 'ERROR');
          }
        });
        
        // „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
        window.dispatchEvent(new CustomEvent('claude-models-changed', {
          detail: { models: currentModels }
        }));
      }
      
      changeDetectionState.lastModelsHash = currentHash;
    } catch (error) {
      log(`„É¢„Éá„É´Â§âÊõ¥Ê§úÂá∫„Ç®„É©„Éº: ${error.message}`, 'DEBUG');
    }
  }

  // Ê©üËÉΩÂ§âÊõ¥Ê§úÂá∫
  async function detectFunctionChanges() {
    try {
      const currentFunctions = await getAvailableFunctions();
      const currentHash = generateHash(currentFunctions.map(f => f.text));
      
      if (changeDetectionState.lastFunctionsHash !== null && 
          changeDetectionState.lastFunctionsHash !== currentHash) {
        
        log('üîÑ Ê©üËÉΩÂ§âÊõ¥„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü', 'WARNING');
        
        // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂÆüË°å
        changeDetectionState.callbacks.onFunctionChange.forEach(callback => {
          try {
            callback(currentFunctions);
          } catch (error) {
            log(`Ê©üËÉΩÂ§âÊõ¥„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„Ç®„É©„Éº: ${error.message}`, 'ERROR');
          }
        });
        
        // „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
        window.dispatchEvent(new CustomEvent('claude-functions-changed', {
          detail: { functions: currentFunctions }
        }));
      }
      
      changeDetectionState.lastFunctionsHash = currentHash;
    } catch (error) {
      log(`Ê©üËÉΩÂ§âÊõ¥Ê§úÂá∫„Ç®„É©„Éº: ${error.message}`, 'DEBUG');
    }
  }

  // ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞
  async function periodicCheck() {
    await detectModelChanges();
    await detectFunctionChanges();
  }

  // DOMÂ§âÊõ¥Áõ£Ë¶ñ
  function setupDOMObserver() {
    if (changeDetectionState.observer) {
      changeDetectionState.observer.disconnect();
    }

    changeDetectionState.observer = new MutationObserver((mutations) => {
      let shouldCheck = false;
      
      mutations.forEach(mutation => {
        // ClaudeÁâπÊúâ„ÅÆ„Çª„É¨„ÇØ„ÇøÁõ£Ë¶ñ
        if (mutation.target.matches && (
          mutation.target.matches('[aria-label*="„É¢„Éá„É´"]') ||
          mutation.target.matches('[data-testid*="model"]') ||
          mutation.target.matches('[data-testid*="input-menu"]') ||
          mutation.target.matches('[role="menu"]') ||
          mutation.target.matches('[role="option"]') ||
          mutation.target.matches('[role="menuitem"]')
        )) {
          shouldCheck = true;
        }
        
        // ËøΩÂä†/ÂâäÈô§„Åï„Çå„Åü„Éé„Éº„Éâ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.querySelector && (
              node.querySelector('[aria-label*="„É¢„Éá„É´"]') ||
              node.querySelector('[data-testid*="model"]') ||
              node.querySelector('[data-testid*="input-menu"]') ||
              node.querySelector('[role="menu"]')
            )) {
              shouldCheck = true;
            }
          }
        });
      });
      
      if (shouldCheck) {
        // „Éá„Éê„Ç¶„É≥„ÇπÂá¶ÁêÜÔºà500msÂæå„Å´ÂÆüË°åÔºâ
        clearTimeout(changeDetectionState.debounceTimer);
        changeDetectionState.debounceTimer = setTimeout(() => {
          periodicCheck();
        }, 500);
      }
    });

    // bodyË¶ÅÁ¥†ÂÖ®‰Ωì„ÇíÁõ£Ë¶ñ
    changeDetectionState.observer.observe(document.body, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: ['aria-label', 'data-testid', 'role', 'aria-expanded', 'aria-selected']
    });
  }

  // Â§âÊõ¥Ê§úÂá∫ÈñãÂßã
  function startChangeDetection(options = {}) {
    const {
      enableDOMObserver = true,
      enablePeriodicCheck = true,
      checkInterval = 30000 // 30Áßí
    } = options;

    if (changeDetectionState.enabled) {
      log('Â§âÊõ¥Ê§úÂá∫„ÅØÊó¢„Å´ÊúâÂäπ„Åß„Åô', 'WARNING');
      return;
    }

    log('üîç ClaudeÂ§âÊõ¥Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†„ÇíÈñãÂßã„Åó„Åæ„Åô', 'INFO');
    
    changeDetectionState.enabled = true;
    
    // ÂàùÊúüÁä∂ÊÖã„ÇíË®òÈå≤
    periodicCheck();
    
    // DOMÁõ£Ë¶ñÈñãÂßã
    if (enableDOMObserver) {
      setupDOMObserver();
      log('DOMÂ§âÊõ¥Áõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü', 'INFO');
    }
    
    // ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã
    if (enablePeriodicCheck) {
      changeDetectionState.checkInterval = setInterval(periodicCheck, checkInterval);
      log(`ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü (${checkInterval/1000}ÁßíÈñìÈöî)`, 'INFO');
    }
  }

  // Â§âÊõ¥Ê§úÂá∫ÂÅúÊ≠¢
  function stopChangeDetection() {
    if (!changeDetectionState.enabled) {
      log('Â§âÊõ¥Ê§úÂá∫„ÅØÁÑ°Âäπ„Åß„Åô', 'WARNING');
      return;
    }

    log('üõë ClaudeÂ§âÊõ¥Ê§úÂá∫„Ç∑„Çπ„ÉÜ„É†„ÇíÂÅúÊ≠¢„Åó„Åæ„Åô', 'INFO');
    
    changeDetectionState.enabled = false;
    
    // DOMÁõ£Ë¶ñÂÅúÊ≠¢
    if (changeDetectionState.observer) {
      changeDetectionState.observer.disconnect();
      changeDetectionState.observer = null;
    }
    
    // ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØÂÅúÊ≠¢
    if (changeDetectionState.checkInterval) {
      clearInterval(changeDetectionState.checkInterval);
      changeDetectionState.checkInterval = null;
    }
    
    // „Éá„Éê„Ç¶„É≥„Çπ„Çø„Ç§„Éû„Éº„ÇØ„É™„Ç¢
    if (changeDetectionState.debounceTimer) {
      clearTimeout(changeDetectionState.debounceTimer);
      changeDetectionState.debounceTimer = null;
    }
  }

  // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØÁôªÈå≤
  function onModelChange(callback) {
    if (typeof callback === 'function') {
      changeDetectionState.callbacks.onModelChange.push(callback);
      log('„É¢„Éá„É´Â§âÊõ¥„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü', 'INFO');
    }
  }

  function onFunctionChange(callback) {
    if (typeof callback === 'function') {
      changeDetectionState.callbacks.onFunctionChange.push(callback);
      log('Ê©üËÉΩÂ§âÊõ¥„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÁôªÈå≤„Åó„Åæ„Åó„Åü', 'INFO');
    }
  }

  // Âº∑Âà∂„ÉÅ„Çß„ÉÉ„ÇØÂÆüË°å
  async function forceCheck() {
    log('üîç Âº∑Âà∂„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÂÆüË°å‰∏≠...', 'INFO');
    await periodicCheck();
    log('‚úÖ Âº∑Âà∂„ÉÅ„Çß„ÉÉ„ÇØÂÆå‰∫Ü', 'SUCCESS');
  }

  // ========================================
  // „Ç∞„É≠„Éº„Éê„É´ÂÖ¨Èñã
  // ========================================
  window.ClaudeAutomation = {
    selectModel,
    selectFunction,
    inputText,
    sendMessage,
    waitForResponse,
    waitForClaudeDeepResearchResponse,  // DeepResearchÂ∞ÇÁî®ÂæÖÊ©üÈñ¢Êï∞„ÇíËøΩÂä†
    getResponse,
    runAutomation,
    getAvailableModels,
    getAvailableFunctions,
    // Â§âÊõ¥Ê§úÂá∫API
    startChangeDetection,
    stopChangeDetection,
    forceCheck,
    onModelChange,
    onFunctionChange,
    getChangeDetectionState: () => ({
      enabled: changeDetectionState.enabled,
      lastModelsHash: changeDetectionState.lastModelsHash,
      lastFunctionsHash: changeDetectionState.lastFunctionsHash,
      callbackCounts: {
        models: changeDetectionState.callbacks.onModelChange.length,
        functions: changeDetectionState.callbacks.onFunctionChange.length
      }
    }),
    // Êã°Âºµ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†API
    logging: {
      setLevel: (level) => {
        if (Object.values(LogLevel).includes(level)) {
          logConfig.level = level;
          log(`„É≠„Ç∞„É¨„Éô„É´„ÇíÂ§âÊõ¥: ${Object.keys(LogLevel).find(k => LogLevel[k] === level)}`, 'INFO');
        }
      },
      getConfig: () => ({ ...logConfig }),
      setConfig: (newConfig) => {
        logConfig = { ...logConfig, ...newConfig };
        log('„É≠„Ç∞Ë®≠ÂÆö„ÇíÊõ¥Êñ∞', 'INFO', newConfig);
      },
      getLogs: (filter = {}) => {
        let filteredLogs = [...logStorage];
        
        if (filter.level !== undefined) {
          filteredLogs = filteredLogs.filter(entry => entry.level >= filter.level);
        }
        
        if (filter.type) {
          filteredLogs = filteredLogs.filter(entry => entry.type === filter.type);
        }
        
        if (filter.operation) {
          filteredLogs = filteredLogs.filter(entry => 
            entry.context?.operation?.includes(filter.operation)
          );
        }
        
        if (filter.since) {
          const sinceTime = typeof filter.since === 'number' ? filter.since : Date.parse(filter.since);
          filteredLogs = filteredLogs.filter(entry => entry.timestamp >= sinceTime);
        }
        
        return filteredLogs;
      },
      clearLogs: () => {
        const count = logStorage.length;
        logStorage = [];
        log(`${count}‰ª∂„ÅÆ„É≠„Ç∞„Çí„ÇØ„É™„Ç¢`, 'INFO');
      },
      exportLogs: (format = 'json') => {
        const logs = logStorage;
        if (format === 'csv') {
          const headers = ['timestamp', 'level', 'type', 'message', 'operation'];
          const csvData = [
            headers.join(','),
            ...logs.map(entry => [
              entry.timestamp,
              entry.level,
              entry.type,
              `"${entry.message.replace(/"/g, '""')}"`,
              entry.context?.operation || ''
            ].join(','))
          ].join('\n');
          return csvData;
        }
        return JSON.stringify(logs, null, 2);
      },
      getSessionInfo: () => ({
        sessionId,
        startTime: sessionId.split('-')[0],
        currentOperations: Array.from(performanceMetrics.keys()),
        totalLogs: logStorage.length
      }),
      // „Çø„Çπ„ÇØ„É™„Çπ„ÉàÈñ¢ÈÄ£„ÅÆ„É≠„Ç∞
      logTaskList: (tasks, action = 'update') => {
        const context = {
          action,
          taskCount: tasks.length,
          completedTasks: tasks.filter(t => t.status === 'completed').length,
          pendingTasks: tasks.filter(t => t.status === 'pending').length,
          inProgressTasks: tasks.filter(t => t.status === 'in_progress').length,
          tasks: tasks.map(t => ({
            id: t.id,
            content: t.content.substring(0, 50) + (t.content.length > 50 ? '...' : ''),
            status: t.status
          }))
        };
        log(`„Çø„Çπ„ÇØ„É™„Çπ„Éà${action === 'create' ? '‰ΩúÊàê' : action === 'update' ? 'Êõ¥Êñ∞' : action}: ${tasks.length}‰ª∂`, 'AUTOMATION', context);
        
        // ÂÄãÂà•„ÅÆ„Çø„Çπ„ÇØ„ÇÇ„É≠„Ç∞„Å´Ë®òÈå≤
        tasks.forEach(task => {
          const taskContext = {
            taskId: task.id,
            status: task.status,
            content: task.content
          };
          log(`„Çø„Çπ„ÇØ ${task.status === 'completed' ? 'ÂÆå‰∫Ü' : task.status === 'in_progress' ? 'ÈÄ≤Ë°å‰∏≠' : 'ÂæÖÊ©ü‰∏≠'}: ${task.content}`, 'DEBUG', taskContext);
        });
      },
      logTaskStatusChange: (taskId, oldStatus, newStatus, content) => {
        const context = {
          taskId,
          oldStatus,
          newStatus,
          content: content.substring(0, 100) + (content.length > 100 ? '...' : '')
        };
        log(`„Çø„Çπ„ÇØ„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÊõ¥: ${content} (${oldStatus} -> ${newStatus})`, 'AUTOMATION', context);
      }
    },
    utils: {
      wait,
      performClick,
      findElement,
      log,
      logError,
      logUserAction,
      logDOMOperation,
      logNetworkOperation,
      startOperation,
      endOperation,
      logPerformance
    }
  };

  // ========================================
  // ÂàùÊúüÂåñ
  // ========================================
  function initialize() {
    // AIHandler„ÅÆÂàùÊúüÂåñ
    if (useAIHandler) {
      menuHandler = window.AIHandler.menuHandler || new window.AIHandler.MenuHandler();
      log('‚úÖ AIHandler„ÇíÂàùÊúüÂåñ„Åó„Åæ„Åó„Åü', 'SUCCESS');
    } else {
      log('AIHandler„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÅÂæìÊù•„ÅÆÊñπÊ≥ï„Çí‰ΩøÁî®„Åó„Åæ„Åô', 'INFO');
    }
  }
  
  // Êã°ÂºµÊ©üËÉΩ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†Áµ±Âêà„ÅÆÁ¢∫Ë™ç
  function setupExtensionLogIntegration() {
    // Êã°ÂºµÊ©üËÉΩ„ÅÆ„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†„ÇíÊ§úÁ¥¢
    if (window.chrome && window.chrome.runtime) {
      log('ChromeÊã°ÂºµÊ©üËÉΩÁí∞Â¢É„ÇíÊ§úÂá∫', 'DEBUG');
    }

    // Êó¢Â≠ò„ÅÆ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„Åå„ÅÇ„Çã„ÅãÁ¢∫Ë™ç
    if (window.logToExtension) {
      log('Êã°ÂºµÊ©üËÉΩ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„ÇíÁô∫Ë¶ã', 'DEBUG');
      // Êó¢Â≠ò„ÅÆ„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„Çí„É©„ÉÉ„Éó
      const originalLogToExtension = window.logToExtension;
      logConfig.extensionLogger = originalLogToExtension;
    }

    // „Ç´„Çπ„Çø„É†„É≠„Ç∞„Ç§„É≥„ÉÜ„Ç∞„É¨„Éº„Ç∑„Éß„É≥Èñ¢Êï∞„ÇíË®≠ÂÆö
    window.setupClaudeLogIntegration = (logHandler) => {
      if (typeof logHandler === 'function') {
        logConfig.extensionLogger = logHandler;
        log('ClaudeÂ∞ÇÁî®„É≠„Ç∞„Éè„É≥„Éâ„É©„Éº„ÇíË®≠ÂÆö', 'SUCCESS');
      }
    };
  }

  // ÂàùÊúüÂåñÂÆüË°å
  initialize();
  setupExtensionLogIntegration();
  
  // Êã°ÂºµÊ©üËÉΩ„É≠„Ç∞Áµ±Âêà„ÉÜ„Çπ„Éà
  log('ClaudeËá™ÂãïÂåñ„Çπ„ÇØ„É™„Éó„ÉàÂàùÊúüÂåñÈñãÂßã', 'AUTOMATION', {
    version: '2.0',
    sessionId: sessionId,
    logSystemEnabled: true,
    extensionIntegration: !!(window.chrome && window.chrome.runtime)
  });
  
  log('ClaudeÂãïÁöÑÊ§úÁ¥¢Ëá™ÂãïÂåñÈñ¢Êï∞„ÅåÂà©Áî®ÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åó„Åü', 'SUCCESS');
  
  // „ÉÜ„Çπ„ÉàÁî®„ÅÆË©≥Á¥∞„É≠„Ç∞
  log('Ë©≥Á¥∞„É≠„Ç∞„Ç∑„Çπ„ÉÜ„É†Âãï‰ΩúÁ¢∫Ë™ç', 'DEBUG', {
    logLevels: Object.keys(LogLevel),
    logTypes: Object.keys(logTypeConfig),
    storageEnabled: logConfig.enableStorage,
    consoleEnabled: logConfig.enableConsole
  });
  return window.ClaudeAutomation;
})();
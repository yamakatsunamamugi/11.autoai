// „É≠„Ç∞„É¨„Éô„É´ÂÆöÁæ©
const LOG_LEVEL = { ERROR: 1, WARN: 2, INFO: 3, DEBUG: 4 };

// Chrome Storage„Åã„Çâ„É≠„Ç∞„É¨„Éô„É´„ÇíÂèñÂæóÔºàÈùûÂêåÊúüÔºâ
let CURRENT_LOG_LEVEL = LOG_LEVEL.INFO; // „Éá„Éï„Ç©„É´„ÉàÂÄ§

// ChromeÊã°ÂºµÁí∞Â¢É„Åß„ÅÆ„ÅøStorage„Åã„ÇâË®≠ÂÆö„ÇíË™≠„ÅøËæº„ÇÄ
if (typeof chrome !== "undefined" && chrome.storage && chrome.storage.local) {
  chrome.storage.local.get("logLevel", (result) => {
    if (result.logLevel) {
      CURRENT_LOG_LEVEL = parseInt(result.logLevel);
      console.log(
        `üìã „É≠„Ç∞„É¨„Éô„É´Ë®≠ÂÆö: ${["", "ERROR", "WARN", "INFO", "DEBUG"][CURRENT_LOG_LEVEL]} (${CURRENT_LOG_LEVEL})`,
      );
    } else {
      console.log("üìã „É≠„Ç∞„É¨„Éô„É´: „Éá„Éï„Ç©„É´„Éà (INFO)");
    }
  });
}

// „É≠„Ç∞„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ÔºàCURRENT_LOG_LEVEL„ÇíÂãïÁöÑ„Å´ÂèÇÁÖßÔºâ
const log = {
  error: (...args) => {
    if (CURRENT_LOG_LEVEL >= LOG_LEVEL.ERROR) console.error(...args);
  },
  warn: (...args) => {
    if (CURRENT_LOG_LEVEL >= LOG_LEVEL.WARN) console.warn(...args);
  },
  info: (...args) => {
    if (CURRENT_LOG_LEVEL >= LOG_LEVEL.INFO) console.log(...args);
  },
  debug: (...args) => {
    if (CURRENT_LOG_LEVEL >= LOG_LEVEL.DEBUG) console.log(...args);
  },
};

/**
 * @fileoverview Gemini Automation V3 - Áµ±ÂêàÁâàÔºàUIÈÄö‰ø°Ê©üËÉΩËøΩÂä†Ôºâ
 * @version 3.2.0
 * @updated 2025-09-23 UIÈÄö‰ø°Ê©üËÉΩ„Å®„Çª„É¨„ÇØ„ÇøÈõÜÁ¥Ñ
 */

(async function () {
  "use strict";

  console.log(`üöÄ Gemini Automation V3 ÂàùÊúüÂåñ`);

  // ÂàùÊúüÂåñ„Éû„Éº„Ç´„ÉºË®≠ÂÆö
  window.GEMINI_SCRIPT_LOADED = true;
  window.GEMINI_SCRIPT_INIT_TIME = Date.now();

  // ========================================
  // „Çª„É¨„ÇØ„ÇøÂÆöÁæ©ÔºàÂÜíÈ†≠„Å´ÈõÜÁ¥ÑÔºâ
  // ========================================
  const SELECTORS = {
    // „É¢„Éá„É´ÈÅ∏Êäû„É°„Éã„É•„Éº
    menuButton: [
      ".gds-mode-switch-button.logo-pill-btn",
      'button[class*="logo-pill-btn"]',
      "button.gds-mode-switch-button",
      "button.logo-pill-btn",
    ],
    menuContainer: [
      ".cdk-overlay-pane .menu-inner-container",
      '.cdk-overlay-pane mat-action-list[data-test-id="mobile-nested-mode-menu"]',
      ".mat-mdc-menu-panel",
    ],
    modelButtons: [
      "button.bard-mode-list-button[mat-menu-item]",
      'button[role="menuitemradio"]',
      "button[mat-menu-item]",
    ],
    modelDesc: [".mode-desc", ".gds-label-m-alt", ".title-and-description"],
    modelDisplay: [
      ".logo-pill-label-container",
      ".gds-mode-switch-button .mdc-button__label div",
    ],

    // Ê©üËÉΩ„Éú„Çø„É≥
    mainButtons: "toolbox-drawer-item > button",
    moreButton: 'button[aria-label="„Åù„ÅÆ‰ªñ"]',
    featureMenuItems: ".cdk-overlay-pane .toolbox-drawer-menu-item button",
    featureLabel: ".label",
    selectedFeatures: [
      ".toolbox-drawer-item-button button.is-selected",
      ".toolbox-drawer-button.has-selected-item",
    ],

    // ÂÖ•ÂäõÊ¨Ñ
    canvas: ".ProseMirror",
    normalInput: ".ql-editor",

    // ÈÄÅ‰ø°„Éú„Çø„É≥
    sendButton: "button.send-button.submit:not(.stop)",
    sendButtonAlt: [
      'button[aria-label="ÈÄÅ‰ø°"]:not([disabled])',
      'button[aria-label*="Send"]:not([disabled])',
      ".send-button:not([disabled])",
    ],
    stopButton: "button.send-button.stop",

    // Deep Research
    deepResearchButton: 'button[data-test-id="confirm-button"]',

    // „É¨„Çπ„Éù„É≥„Çπ
    canvasResponse: ".ProseMirror",
    normalResponse: ".model-response-text .markdown",
    responseAlt: [
      "[data-response-index]:last-child",
      ".model-response:last-child",
      '[role="presentation"]:last-child',
    ],

    // „Ç™„Éº„Éê„Éº„É¨„Ç§
    overlay: ".cdk-overlay-backdrop",
  };

  // ========================================
  // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞ÔºàÊúÄÂàù„Å´ÂÆöÁæ©Ôºâ
  // ========================================
  const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));

  const findElement = (selectorArray, parent = document) => {
    const selectors = Array.isArray(selectorArray)
      ? selectorArray
      : [selectorArray];
    for (const selector of selectors) {
      const element = parent.querySelector(selector);
      if (element) return element;
    }
    return null;
  };

  const findElements = (selectorArray, parent = document) => {
    const selectors = Array.isArray(selectorArray)
      ? selectorArray
      : [selectorArray];
    for (const selector of selectors) {
      const elements = parent.querySelectorAll(selector);
      if (elements.length > 0) return Array.from(elements);
    }
    return [];
  };

  const getCleanText = (element) => {
    if (!element) return "";
    try {
      const clone = element.cloneNode(true);
      clone
        .querySelectorAll(
          "mat-icon, .mat-ripple, .mat-mdc-button-persistent-ripple, .mat-focus-indicator, .mat-mdc-button-touch-target, .cdk-visually-hidden",
        )
        .forEach((el) => el.remove());
      return clone.textContent.trim().replace(/\s+/g, " ");
    } catch (e) {
      return element.textContent.trim().replace(/\s+/g, " ");
    }
  };

  // ========================================
  // „É¢„Éá„É´„Å®Ê©üËÉΩ„ÅÆÂàùÊúüÂåñ
  // ========================================
  window.availableModels = [];
  window.availableFeatures = [];

  // ========================================
  // UIÈÄö‰ø°Ê©üËÉΩ
  // ========================================
  async function sendToUI(models, features) {
    try {
      if (
        typeof chrome !== "undefined" &&
        chrome.runtime &&
        chrome.runtime.sendMessage
      ) {
        log.debug("üì° [Gemini] UIÈÄö‰ø°ÈñãÂßã", {
          modelsCount: models?.length || 0,
          featuresCount: features?.length || 0,
          timestamp: new Date().toISOString(),
        });

        // „Çø„Ç§„É†„Ç¢„Ç¶„Éà‰ªò„Åç„ÅßsendMessage„ÇíÂÆüË°å
        const sendMessageWithTimeout = new Promise((resolve) => {
          const timeout = setTimeout(() => {
            log.warn("‚è±Ô∏è [Gemini] sendMessage„Åå„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÔºà3ÁßíÁµåÈÅéÔºâ");
            resolve({
              error: "timeout",
              message: "sendMessage timeout after 3000ms",
            });
          }, 3000); // 3Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà

          try {
            chrome.runtime.sendMessage(
              {
                type: "AI_MODEL_FUNCTION_UPDATE",
                aiType: "gemini",
                data: {
                  models: models || [],
                  features: features || [],
                  timestamp: new Date().toISOString(),
                },
              },
              (response) => {
                clearTimeout(timeout);

                // chrome.runtime.lastError„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                if (chrome.runtime.lastError) {
                  log.warn(
                    "‚ö†Ô∏è [Gemini] chrome.runtime.lastError:",
                    chrome.runtime.lastError.message,
                  );
                  resolve({
                    error: "runtime_error",
                    message: chrome.runtime.lastError.message,
                  });
                } else {
                  log.debug("üì® [Gemini] sendMessageÂøúÁ≠îÂèó‰ø°:", response);
                  resolve(response || { success: true });
                }
              },
            );
          } catch (error) {
            clearTimeout(timeout);
            log.warn("‚ùå [Gemini] sendMessageÂÆüË°å„Ç®„É©„Éº:", error.message);
            resolve({
              error: "execution_error",
              message: error.message,
            });
          }
        });

        const result = await sendMessageWithTimeout;

        if (result.error) {
          log.warn("‚ö†Ô∏è [Gemini] UIÈÄö‰ø°Â§±Êïó:", result);
        } else {
          log.info("‚úÖ [Gemini] UIÊõ¥Êñ∞„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÈÄÅ‰ø°„Åó„Åæ„Åó„Åü");
        }

        return result;
      }
    } catch (error) {
      log.debug(
        "UIÈÄö‰ø°„Ç®„É©„ÉºÔºàÊã°ÂºµÊ©üËÉΩ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„ÉàÂ§ñ„ÅÆÂèØËÉΩÊÄßÔºâ:",
        error.message,
      );
    }
  }

  // ========================================
  // „É¢„Éá„É´„Å®Ê©üËÉΩ„ÅÆÊé¢Á¥¢
  // ========================================
  async function discoverModelsAndFeatures() {
    log.info("„ÄêStep 4-3-1-1„Äë„É¢„Éá„É´„Å®Ê©üËÉΩ„ÅÆÊé¢Á¥¢");

    // „ÄêStep 4-3-1-2„ÄëÈÅ∏ÊäûÊ∏à„ÅøÊ©üËÉΩ„ÅÆËß£Èô§
    await deselectAllFeatures();

    // „ÄêStep 4-3-1-3„Äë„É¢„Éá„É´Êé¢Á¥¢
    try {
      const menuButton = findElement(SELECTORS.menuButton);

      if (menuButton) {
        menuButton.click();
        await wait(1500);

        const menuContainer = findElement(SELECTORS.menuContainer);

        if (menuContainer) {
          const modelButtons = findElements(
            SELECTORS.modelButtons,
            menuContainer,
          );

          window.availableModels = modelButtons
            .map((btn) => {
              const text = getCleanText(findElement(SELECTORS.modelDesc, btn));
              return text || getCleanText(btn);
            })
            .filter(Boolean);

          log.info(
            `„É¢„Éá„É´Êé¢Á¥¢ÂÆå‰∫Ü: ${window.availableModels.length}ÂÄã„ÅÆ„É¢„Éá„É´„ÇíÁô∫Ë¶ã`,
          );
        }
      }
    } catch (e) {
      log.error("„É¢„Éá„É´Êé¢Á¥¢„Ç®„É©„Éº: " + e.message);
    } finally {
      // „É°„Éã„É•„Éº„ÇíÈñâ„Åò„Çã
      const overlay = document.querySelector(SELECTORS.overlay);
      if (overlay) overlay.click();
      await wait(500);
    }

    // „ÄêStep 4-3-1-4„ÄëÊ©üËÉΩÊé¢Á¥¢
    try {
      const featureNames = new Set();

      const mainButtons = findElements(SELECTORS.mainButtons);
      mainButtons.forEach((btn) => {
        const labelEl = findElement(SELECTORS.featureLabel, btn);
        if (labelEl) {
          const text = getCleanText(labelEl);
          if (text && text !== "„Åù„ÅÆ‰ªñ") {
            featureNames.add(text);
          }
        }
      });

      const moreButton = findElement(SELECTORS.moreButton);
      if (moreButton) {
        moreButton.click();
        await wait(1500);

        const menuItems = findElements(SELECTORS.featureMenuItems);
        menuItems.forEach((item) => {
          const labelEl = findElement(SELECTORS.featureLabel, item);
          if (labelEl) {
            const text = getCleanText(labelEl);
            if (text) {
              featureNames.add(text);
            }
          }
        });
      }

      window.availableFeatures = Array.from(featureNames).filter(Boolean);
      log.info(
        `Ê©üËÉΩÊé¢Á¥¢ÂÆå‰∫Ü: ${window.availableFeatures.length}ÂÄã„ÅÆÊ©üËÉΩ„ÇíÁô∫Ë¶ã`,
      );
    } catch (e) {
      log.error("Ê©üËÉΩÊé¢Á¥¢„Ç®„É©„Éº: " + e.message);
    } finally {
      const overlay = document.querySelector(SELECTORS.overlay);
      if (overlay) overlay.click();
      await wait(500);
    }

    // „ÄêStep 4-3-1-5„ÄëUIÊõ¥Êñ∞
    await sendToUI(window.availableModels, window.availableFeatures);

    return {
      models: window.availableModels,
      features: window.availableFeatures,
    };
  }

  // ========================================
  // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÔºàCanvas/ÈÄöÂ∏∏„É¢„Éº„ÉâËá™ÂãïÂà§ÂÆöÔºâ
  // ========================================
  async function inputTextGemini(text) {
    // Canvas„É¢„Éº„Éâ„ÉÅ„Çß„ÉÉ„ÇØ
    const canvas = document.querySelector(SELECTORS.canvas);
    if (canvas && canvas.isContentEditable) {
      log.debug("Canvas mode detected");
      return await inputToCanvas(text);
    }

    // ÈÄöÂ∏∏„É¢„Éº„Éâ
    const editor = document.querySelector(SELECTORS.normalInput);
    if (editor) {
      log.debug("Normal mode detected");
      return await inputToNormal(text);
    }

    throw new Error("„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
  }

  async function inputToCanvas(text) {
    const canvas = document.querySelector(SELECTORS.canvas);
    if (!canvas) {
      throw new Error("Canvas (.ProseMirror) „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    canvas.focus();
    await wait(100);

    // Clear existing content
    canvas.innerHTML = "<p></p>";

    // Set new content
    const paragraph = canvas.querySelector("p");
    if (paragraph) {
      paragraph.textContent = text;
    } else {
      canvas.innerHTML = `<p>${text}</p>`;
    }

    // Dispatch events
    canvas.dispatchEvent(new Event("input", { bubbles: true }));
    canvas.dispatchEvent(new Event("change", { bubbles: true }));

    await wait(500);
    return canvas;
  }

  async function inputToNormal(text) {
    const editor = document.querySelector(SELECTORS.normalInput);
    if (!editor) {
      throw new Error("„ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ (.ql-editor) „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
    }

    editor.textContent = text;
    if (editor.classList.contains("ql-blank")) {
      editor.classList.remove("ql-blank");
    }
    editor.dispatchEvent(new Event("input", { bubbles: true }));
    editor.dispatchEvent(new Event("change", { bubbles: true }));
    await wait(500);

    return editor;
  }

  // ========================================
  // „É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
  // ========================================
  async function sendMessageGemini() {
    let sendButton = document.querySelector(SELECTORS.sendButton);

    if (!sendButton) {
      sendButton = findElement(SELECTORS.sendButtonAlt);
    }

    if (!sendButton) throw new Error("ÈÄÅ‰ø°„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");

    sendButton.click();
    await wait(1000);

    return true;
  }

  // ========================================
  // ÂøúÁ≠îÂæÖÊ©ü
  // ========================================
  async function waitForResponseGemini() {
    const maxWaitTime = 300000; // 5ÂàÜ
    const checkInterval = 1000;
    let elapsedTime = 0;

    log.debug("ÂøúÁ≠îÂæÖÊ©ü„ÇíÈñãÂßã„Åó„Åæ„Åô...");

    while (elapsedTime < maxWaitTime) {
      await wait(checkInterval);
      elapsedTime += checkInterval;

      const stopButton = document.querySelector(SELECTORS.stopButton);

      if (!stopButton) {
        log.debug("ÂøúÁ≠î„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºàÂÅúÊ≠¢„Éú„Çø„É≥„ÅåÊ∂à„Åà„Åæ„Åó„ÅüÔºâ");
        return true;
      }

      if (elapsedTime % 10000 === 0) {
        log.debug(`ÂøúÁ≠îÂæÖÊ©ü‰∏≠... (${elapsedTime / 1000}ÁßíÁµåÈÅé)`);
      }
    }

    throw new Error("Gemini„ÅÆÂøúÁ≠î„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„ÅüÔºà5ÂàÜÔºâ");
  }

  // ========================================
  // „ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
  // ========================================
  async function getResponseTextGemini() {
    // Canvas
    const canvasEditor = document.querySelector(SELECTORS.canvasResponse);
    if (canvasEditor && canvasEditor.textContent.trim()) {
      return canvasEditor.textContent.trim();
    }

    // ÈÄöÂ∏∏ÂøúÁ≠î
    const responseElements = document.querySelectorAll(
      SELECTORS.normalResponse,
    );
    if (responseElements.length > 0) {
      const latestResponse = responseElements[responseElements.length - 1];
      if (latestResponse) {
        return latestResponse.textContent.trim();
      }
    }

    // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
    for (const selector of SELECTORS.responseAlt) {
      const element = document.querySelector(selector);
      if (element) {
        return element.textContent.trim();
      }
    }

    throw new Error("Gemini„ÅÆÂõûÁ≠î„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
  }

  // ========================================
  // ÈÅ∏ÊäûÊ∏à„ÅøÊ©üËÉΩ„ÅÆËß£Èô§
  // ========================================
  async function deselectAllFeatures() {
    log.debug("„ÄêStep 4-3-2-0„ÄëÈÅ∏Êäû„Åï„Çå„Å¶„ÅÑ„ÇãÊ©üËÉΩ„Çí„Åô„Åπ„Å¶Ëß£Èô§");
    try {
      const selectedButtons = findElements(SELECTORS.selectedFeatures);
      let count = 0;
      for (const btn of selectedButtons) {
        btn.click();
        await wait(2000);
        count++;
      }
      if (count > 0) {
        log.info(`Ëß£Èô§„Åó„ÅüÊ©üËÉΩ„ÅÆÊï∞: ${count}`);
      }
      return count;
    } catch (error) {
      log.error("Ê©üËÉΩËß£Èô§„Ç®„É©„Éº:", error);
      return 0;
    }
  }

  // ========================================
  // „É¢„Éá„É´ÈÅ∏ÊäûÊ©üËÉΩ
  // ========================================
  async function selectModel(modelName) {
    log.debug("„ÄêStep 4-3-3„Äë„É¢„Éá„É´ÈÅ∏Êäû", modelName);

    if (!modelName || modelName === "" || modelName === "Ë®≠ÂÆö„Å™„Åó") {
      log.debug("„É¢„Éá„É´ÈÅ∏Êäû„Çí„Çπ„Ç≠„ÉÉ„Éó");
      return { success: true, skipped: true };
    }

    try {
      // „ÄêStep 4-3-3-1„Äë„É°„Éã„É•„Éº„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
      const menuButton = findElement(SELECTORS.menuButton);
      if (!menuButton) {
        throw new Error("„É¢„Éá„É´ÈÅ∏Êäû„É°„Éã„É•„Éº„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
      }
      menuButton.click();
      await wait(1500);

      // „ÄêStep 4-3-3-2„Äë„É°„Éã„É•„ÉºÂÜÖ„Åß„É¢„Éá„É´„ÇíÊé¢„Åó„Å¶ÈÅ∏Êäû
      const menuContainer = findElement(SELECTORS.menuContainer);
      if (!menuContainer) {
        throw new Error("„É¢„Éá„É´ÈÅ∏Êäû„É°„Éã„É•„Éº„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
      }

      const modelButtons = findElements(SELECTORS.modelButtons, menuContainer);
      const targetButton = Array.from(modelButtons).find((btn) => {
        const text = getCleanText(btn);
        return text && text.includes(modelName);
      });

      if (!targetButton) {
        throw new Error(`„É¢„Éá„É´ "${modelName}" „ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
      }

      targetButton.click();
      await wait(2000);

      // „ÄêStep 4-3-3-3„ÄëÈÅ∏ÊäûÁ¢∫Ë™ç
      const displayElement = findElement(SELECTORS.modelDisplay);
      const displayText = getCleanText(displayElement);

      if (!displayText.includes(modelName.replace("2.5 ", ""))) {
        log.warn(`„É¢„Éá„É´ÈÅ∏ÊäûÁ¢∫Ë™ç: ÊúüÂæÖÂÄ§=${modelName}, ÂÆüÈöõ=${displayText}`);
      }

      log.info(`„É¢„Éá„É´„Äå${displayText}„Äç„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`);
      return { success: true, selected: displayText };
    } catch (error) {
      log.error("„É¢„Éá„É´ÈÅ∏Êäû„Ç®„É©„Éº:", error);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // Ê©üËÉΩÈÅ∏ÊäûÊ©üËÉΩ
  // ========================================
  async function selectFeature(featureName) {
    log.debug("„ÄêStep 4-3-4„ÄëÊ©üËÉΩÈÅ∏Êäû", featureName);

    if (!featureName || featureName === "" || featureName === "Ë®≠ÂÆö„Å™„Åó") {
      log.debug("Ê©üËÉΩÈÅ∏Êäû„Çí„Çπ„Ç≠„ÉÉ„Éó");
      return { success: true, skipped: true };
    }

    try {
      // „ÄêStep 4-3-4-1„Äë„Åæ„Åö„É°„Ç§„É≥„Éú„Çø„É≥„Åã„ÇâÊé¢„Åô
      let featureButton = null;
      const allButtons = findElements(SELECTORS.mainButtons);
      featureButton = Array.from(allButtons).find(
        (btn) =>
          getCleanText(findElement(SELECTORS.featureLabel, btn)) ===
          featureName,
      );

      // „ÄêStep 4-3-4-2„ÄëË¶ã„Å§„Åã„Çâ„Å™„Åë„Çå„Å∞„Äå„Åù„ÅÆ‰ªñ„Äç„É°„Éã„É•„Éº„ÇíÈñã„Åè
      if (!featureButton) {
        const moreButton = findElement(SELECTORS.moreButton);
        if (!moreButton) {
          throw new Error("„Äå„Åù„ÅÆ‰ªñ„Äç„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì");
        }
        moreButton.click();
        await wait(1500);

        const menuButtons = findElements(SELECTORS.featureMenuItems);
        featureButton = Array.from(menuButtons).find(
          (btn) =>
            getCleanText(findElement(SELECTORS.featureLabel, btn)) ===
            featureName,
        );
      }

      if (!featureButton) {
        throw new Error(`Ê©üËÉΩ„Äå${featureName}„Äç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
      }

      // „ÄêStep 4-3-4-3„ÄëÊ©üËÉΩ„Çí„ÇØ„É™„ÉÉ„ÇØ
      featureButton.click();
      await wait(2000);

      // „ÄêStep 4-3-4-4„ÄëÈÅ∏ÊäûÁ¢∫Ë™ç
      const selectedButton = findElement(SELECTORS.selectedFeatures);
      if (!selectedButton) {
        log.warn(`Ê©üËÉΩ„Äå${featureName}„Äç„ÅÆÈÅ∏ÊäûÁä∂ÊÖã„ÇíÁ¢∫Ë™ç„Åß„Åç„Åæ„Åõ„Çì`);
      }

      log.info(`Ê©üËÉΩ„Äå${featureName}„Äç„ÇíÈÅ∏Êäû„Åó„Åæ„Åó„Åü`);
      return { success: true, selected: featureName };
    } catch (error) {
      log.error("Ê©üËÉΩÈÅ∏Êäû„Ç®„É©„Éº:", error);
      return { success: false, error: error.message };
    }
  }

  // ========================================
  // Deep ResearchÂæÖÊ©üÂá¶ÁêÜ
  // ========================================
  async function waitForDeepResearch(startTime) {
    log.debug("„ÄêStep 4-3-6-DR„ÄëDeep ResearchÂ∞ÇÁî®ÂæÖÊ©üÂá¶ÁêÜ");

    const MAX_WAIT = 40 * 60 * 1000; // 40ÂàÜ
    const logDr = (message) => {
      const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(1);
      log.info(`[ÁµåÈÅé: ${elapsedTime}Áßí] ${message}`);
    };

    return new Promise((resolve, reject) => {
      const timeoutId = setTimeout(() => {
        cleanup();
        reject(new Error(`Deep Research„Åå40ÂàÜ‰ª•ÂÜÖ„Å´ÂÆå‰∫Ü„Åó„Åæ„Åõ„Çì„Åß„Åó„Åü`));
      }, MAX_WAIT);

      let loggingInterval, checkInterval;

      const cleanup = () => {
        clearTimeout(timeoutId);
        if (loggingInterval) clearInterval(loggingInterval);
        if (checkInterval) clearInterval(checkInterval);
      };

      const deepResearchFlow = async () => {
        // „ÄêStep DR-1„ÄëÂàùÊúüÂøúÁ≠î„ÅÆÂÅúÊ≠¢„Éú„Çø„É≥Âá∫Áèæ„ÇíÂæÖÊ©ü
        logDr("ÂàùÊúüÂøúÁ≠î„ÅÆÂÅúÊ≠¢„Éú„Çø„É≥Âá∫Áèæ„ÇíÂæÖÊ©ü‰∏≠...");
        while (!findElement([SELECTORS.stopButton])) {
          if (Date.now() - startTime > 30000) {
            throw new Error("30Áßí‰ª•ÂÜÖ„Å´ÂàùÊúüÂøúÁ≠î„ÅåÈñãÂßã„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü");
          }
          await wait(1000);
        }
        logDr("ÂàùÊúüÂøúÁ≠î„ÅÆÂÅúÊ≠¢„Éú„Çø„É≥„ÅåÂá∫Áèæ„Åó„Åæ„Åó„Åü");

        // „ÄêStep DR-2„ÄëÂàùÊúüÂøúÁ≠îÂÆå‰∫Ü„ÇíÂæÖ„Å°„ÄÅ„É™„Çµ„Éº„ÉÅÈñãÂßã„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ
        logDr("ÂàùÊúüÂøúÁ≠î„ÅÆÂÆå‰∫Ü„ÇíÂæÖÊ©ü‰∏≠...");
        while (findElement([SELECTORS.stopButton])) {
          if (Date.now() - startTime > 5 * 60 * 1000) {
            throw new Error("5ÂàÜ‰ª•ÂÜÖ„Å´ÂàùÊúüÂøúÁ≠î„ÅåÂÆå‰∫Ü„Åó„Åæ„Åõ„Çì„Åß„Åó„Åü");
          }
          await wait(1000);
        }

        const researchButton = findElement([SELECTORS.deepResearchButton]);
        if (!researchButton) {
          throw new Error("„Äå„É™„Çµ„Éº„ÉÅ„ÇíÈñãÂßã„Äç„Éú„Çø„É≥„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü");
        }

        researchButton.click();
        logDr("„Äå„É™„Çµ„Éº„ÉÅ„ÇíÈñãÂßã„Äç„Éú„Çø„É≥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åæ„Åó„Åü");
        await wait(2000);

        // „ÄêStep DR-3„ÄëÊú¨ÂøúÁ≠î„ÅÆÂÆå‰∫Ü„ÇíÂæÖ„Å§
        logDr("Êú¨ÂøúÁ≠î„ÅÆÂÆå‰∫Ü„ÇíÂæÖÊ©ü‰∏≠...");

        loggingInterval = setInterval(() => {
          const btn = findElement([SELECTORS.stopButton]);
          logDr(`[ÂÆöÊúü„ÉÅ„Çß„ÉÉ„ÇØ] ÂÅúÊ≠¢„Éú„Çø„É≥: ${btn ? "Â≠òÂú®" : "Ê∂àÊªÖ"}`);
        }, 10000);

        // Êú¨ÂøúÁ≠î„ÅÆÂÅúÊ≠¢„Éú„Çø„É≥Âá∫Áèæ„ÇíÂæÖ„Å§
        while (!findElement([SELECTORS.stopButton])) {
          await wait(1000);
        }
        logDr("Êú¨ÂøúÁ≠î„ÅÆÂÅúÊ≠¢„Éú„Çø„É≥„ÅåÂá∫Áèæ„Åó„Åæ„Åó„Åü");

        let lastSeenTime = Date.now();

        checkInterval = setInterval(() => {
          if (findElement([SELECTORS.stopButton])) {
            lastSeenTime = Date.now();
          } else {
            if (Date.now() - lastSeenTime > 10000) {
              logDr("ÂÅúÊ≠¢„Éú„Çø„É≥„Åå10ÁßíÈñìË°®Á§∫„Åï„Çå„Åæ„Åõ„Çì„ÄÇÂøúÁ≠îÂÆå‰∫Ü„Å®„Åø„Å™„Åó„Åæ„Åô");
              cleanup();
              resolve("Deep Research„ÅÆÂøúÁ≠î„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü");
            }
          }
        }, 2000);
      };

      deepResearchFlow().catch((err) => {
        cleanup();
        reject(err);
      });
    });
  }

  // ========================================
  // „Çø„Çπ„ÇØÂÆüË°åÔºàÊã°ÂºµÁâàÔºâ
  // ========================================
  async function executeTask(taskData) {
    log.info("üöÄ „ÄêStep 4-3„ÄëGemini „Çø„Çπ„ÇØÂÆüË°åÈñãÂßã", taskData);

    try {
      const promptText = taskData.prompt || "„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Åß„Åô";
      const modelName = taskData.model || "";
      const featureName = taskData.function || "";

      // „ÄêStep 4-3-2„Äë„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ
      log.debug("„ÄêStep 4-3-2„Äë„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ");
      await inputTextGemini(promptText);

      // „ÄêStep 4-3-3„Äë„É¢„Éá„É´ÈÅ∏ÊäûÔºàÂøÖË¶Å„Å™Â†¥ÂêàÔºâ
      if (modelName && modelName !== "Ë®≠ÂÆö„Å™„Åó") {
        const modelResult = await selectModel(modelName);
        if (!modelResult.success && !modelResult.skipped) {
          throw new Error(`„É¢„Éá„É´ÈÅ∏ÊäûÂ§±Êïó: ${modelResult.error}`);
        }
      }

      // „ÄêStep 4-3-4„ÄëÊ©üËÉΩÈÅ∏ÊäûÔºàÂøÖË¶Å„Å™Â†¥ÂêàÔºâ
      if (featureName && featureName !== "Ë®≠ÂÆö„Å™„Åó") {
        const featureResult = await selectFeature(featureName);
        if (!featureResult.success && !featureResult.skipped) {
          throw new Error(`Ê©üËÉΩÈÅ∏ÊäûÂ§±Êïó: ${featureResult.error}`);
        }
      }

      // „ÄêStep 4-3-5„Äë„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°
      log.debug("„ÄêStep 4-3-5„Äë„É°„ÉÉ„Çª„Éº„Ç∏ÈÄÅ‰ø°");
      await sendMessageGemini();
      const startTime = Date.now();

      // „ÄêStep 4-3-6„ÄëÂøúÁ≠îÂæÖÊ©üÔºàDeep ResearchÂà§ÂÆöÔºâ
      log.debug("„ÄêStep 4-3-6„ÄëÂøúÁ≠îÂæÖÊ©ü");
      if (featureName === "Deep Research") {
        await waitForDeepResearch(startTime);
      } else {
        await waitForResponseGemini();
      }

      // „ÄêStep 4-3-7„Äë„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
      log.debug("„ÄêStep 4-3-7„Äë„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó");
      const content = await getResponseTextGemini();

      return {
        success: true,
        content: content,
        model: modelName,
        feature: featureName,
      };
    } catch (error) {
      log.error("‚ùå „Çø„Çπ„ÇØÂÆüË°å„Ç®„É©„Éº:", error);
      return {
        success: false,
        error: error.message,
      };
    }
  }

  // ========================================
  // „Ç∞„É≠„Éº„Éê„É´ÂÖ¨Èñã
  // ========================================
  window.GeminiAutomation = {
    executeTask,
    discoverModelsAndFeatures,
    deselectAllFeatures,
    selectModel,
    selectFeature,
    waitForDeepResearch,
    inputTextGemini,
    sendMessageGemini,
    waitForResponseGemini,
    getResponseTextGemini,
    inputToCanvas,
    inputToNormal,
    utils: {
      log,
      wait,
      findElement,
      findElements,
      getCleanText,
    },
  };

  // ========================================
  // Chrome Runtime „É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éä„Éº
  // ========================================
  if (
    typeof chrome !== "undefined" &&
    chrome.runtime &&
    chrome.runtime.onMessage
  ) {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
      // ping/pong „É°„ÉÉ„Çª„Éº„Ç∏„Å∏„ÅÆÂç≥Â∫ßÂøúÁ≠îÔºàÊúÄÂÑ™ÂÖàÔºâ
      if (
        request.action === "ping" ||
        request.type === "CONTENT_SCRIPT_CHECK"
      ) {
        console.log("üèì [Gemini] PingÂèó‰ø°„ÄÅÂç≥Â∫ß„Å´PongÂøúÁ≠î");
        sendResponse({
          action: "pong",
          status: "ready",
          timestamp: Date.now(),
          scriptLoaded: true,
        });
        return true;
      }

      // „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
      if (request.action === "CHECK_INPUT_FIELD") {
        console.log("üîç [Gemini] „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØÈñãÂßã");
        const selectors = request.selectors || [
          ".ProseMirror",
          ".ql-editor",
          'div[contenteditable="true"]',
          "textarea",
        ];
        let found = false;
        for (const selector of selectors) {
          const element = document.querySelector(selector);
          if (element) {
            console.log(`‚úÖ [Gemini] „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÇíÁô∫Ë¶ã: ${selector}`);
            found = true;
            break;
          }
        }
        if (!found) {
          console.warn(`‚ö†Ô∏è [Gemini] „ÉÜ„Ç≠„Çπ„ÉàÂÖ•ÂäõÊ¨Ñ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
        }
        sendResponse({ found: found });
        return true;
      }

      // executeTask „Çø„Çπ„ÇØ„ÅÆÂá¶ÁêÜ
      if (
        request.action === "executeTask" ||
        request.type === "executeTask" ||
        request.type === "GEMINI_EXECUTE_TASK"
      ) {
        const requestId = Math.random().toString(36).substring(2, 8);
        console.log(`üì¨ [Gemini] executeTaskÂÆüË°åÈñãÂßã [ID:${requestId}]:`, {
          action: request.action,
          type: request.type,
          automationName: request.automationName,
          hasTask: !!request.task,
          hasTaskData: !!request.taskData,
          taskId: request?.task?.id || request?.taskData?.id,
        });

        (async () => {
          try {
            if (typeof executeTask === "function") {
              console.log(
                `‚úÖ [Gemini] executeTaskÈñ¢Êï∞„ÅåÂà©Áî®ÂèØËÉΩ [ID:${requestId}]`,
              );
              const taskToExecute = request.task || request.taskData || request;
              console.log(
                `üöÄ [Gemini] executeTaskÂëº„Å≥Âá∫„ÅóÂâç [ID:${requestId}]:`,
                {
                  taskId: taskToExecute?.id,
                  taskKeys: Object.keys(taskToExecute || {}),
                },
              );
              try {
                const result = await executeTask(taskToExecute);
                console.log(`‚úÖ [Gemini] executeTaskÂÆå‰∫Ü [ID:${requestId}]:`, {
                  success: result?.success,
                  hasResult: !!result,
                  resultKeys: result ? Object.keys(result) : [],
                });
                sendResponse({ success: true, result });
              } catch (taskError) {
                console.error(
                  `‚ùå [Gemini] executeTask„Ç®„É©„Éº [ID:${requestId}]:`,
                  taskError,
                );
                sendResponse({
                  success: false,
                  error: taskError.message || "executeTask failed",
                  stack: taskError.stack,
                });
              }
            } else {
              console.error(
                `‚ùå [Gemini] executeTaskÈñ¢Êï∞„ÅåÊú™ÂÆöÁæ© [ID:${requestId}]`,
                {
                  requestId: requestId,
                  availableFunctions: {
                    executeTask: typeof executeTask,
                    findElement: typeof findElement,
                    inputTextGemini: typeof inputTextGemini,
                  },
                  timestamp: new Date().toISOString(),
                },
              );
              sendResponse({
                success: false,
                error: "executeTask not available",
                timestamp: new Date().toISOString(),
              });
            }
          } catch (error) {
            console.error(`‚ùå [Gemini] „Ç®„É©„Éº [ID:${requestId}]:`, error);
            sendResponse({ success: false, error: error.message });
          }
        })();
        return true; // ÈùûÂêåÊúü„É¨„Çπ„Éù„É≥„Çπ„ÅÆ„Åü„ÇÅ„Å´ÂøÖË¶Å
      }

      // „Åù„ÅÆ‰ªñ„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çø„Ç§„Éó„ÅØÁÑ°Ë¶ñ
      console.log(
        `‚ÑπÔ∏è [Gemini] Êú™ÂØæÂøú„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„Çø„Ç§„Éó:`,
        request?.type || request?.action,
      );
    });

    console.log("‚úÖ [Gemini] „É°„ÉÉ„Çª„Éº„Ç∏„É™„Çπ„Éä„ÉºÁôªÈå≤ÂÆå‰∫Ü");
    window.GEMINI_MESSAGE_LISTENER_READY = true;
  }

  log.info("‚úÖ Gemini Automation Ê∫ñÂÇôÂÆå‰∫Ü");
})();
